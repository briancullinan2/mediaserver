<?php

include dirname(__FILE__) . DIRECTORY_SEPARATOR . 'theme.php';

function menu_tunegazelle()
{
	return array(
		'template/tunegazelle/styles' => array(
			'callback' => 'theme',
			'arguments' => array('styles', array('styles/layout.css', 'styles/errors.css', 'styles/highlight.css'), true),
			'type' => MENU_CALLBACK,
		),
		'template/tunegazelle/scripts' => array(
			'callback' => 'theme',
			'arguments' => array('scripts', array('js/jquery.js', 'js/jquery-ui.js'), true),
			'type' => MENU_CALLBACK,
		),
		'template/tunegazelle/colors.css' => array(
			'callback' => 'theme',
			'type' => MENU_CALLBACK,
			'template' => 'colors',
		),
		'users/login' => array(
			'name' => 'Tune Gazelle',
			'icon' => 'template/tunegazelle/images/logo-tiny.png',
		),
	);
}

function setting_tunegazelle_text_color($settings)
{
	if(isset($settings['tunegazelle_text_color']) && preg_match('/#[a-f0-9]{3}([a-f0-9]{3})?/i', $settings['tunegazelle_text_color'], $matches) > 0)
		return $matches[0];
	else
		return '#443322';
}

function setting_tunegazelle_text_secondary_color($settings)
{
	if(isset($settings['tunegazelle_text_secondary_color']) && preg_match('/#[a-f0-9]{3}([a-f0-9]{3})?/i', $settings['tunegazelle_text_secondary_color'], $matches) > 0)
		return $matches[0];
	else
		return '#DDCCBB';
}

function setting_tunegazelle_main_color($settings)
{
	if(isset($settings['tunegazelle_main_color']) && preg_match('/#[a-f0-9]{3}([a-f0-9]{3})?/i', $settings['tunegazelle_main_color'], $matches) > 0)
		return $matches[0];
	else
		return '#FFEEBB';
}

function setting_tunegazelle_secondary_color($settings)
{
	if(isset($settings['tunegazelle_secondary_color']) && preg_match('/#[a-f0-9]{3}([a-f0-9]{3})?/i', $settings['tunegazelle_secondary_color'], $matches) > 0)
		return $matches[0];
	else
		return '#332211';
}

function setting_tunegazelle_menu_color($settings)
{
	if(isset($settings['tunegazelle_menu_color']) && preg_match('/#[a-f0-9]{3}([a-f0-9]{3})?/i', $settings['tunegazelle_menu_color'], $matches) > 0)
		return $matches[0];
	else
		return '#FFFFFF';
}

function setting_tunegazelle_border_color($settings)
{
	if(isset($settings['tunegazelle_border_color']) && preg_match('/#[a-f0-9]{3}([a-f0-9]{3})?/i', $settings['tunegazelle_border_color'], $matches) > 0)
		return $matches[0];
	else
		return '#AA9988';
}

function configure_tunegazelle()
{
	$options = array();
	
	$options['tunegazelle_main_color'] = array(
		'name' => lang('Primary color', 'primary color'),
		'status' => '',
		'description' => array(
			'list' => array(
				lang('This is title bar color', 'title color description'),
			),
		),
		'type' => 'theme',
		'value' => 'color_picker',
	);
	
	$options['tunegazelle_secondary_color'] = array(
		'name' => lang('Secondary color', 'secondary color'),
		'status' => '',
		'description' => array(
			'list' => array(
				lang('This is control panel color', 'secondary menu color description'),
			),
		),
		'type' => 'theme',
		'value' => 'color_picker',
	);
	
	$options['tunegazelle_text_color'] = array(
		'name' => lang('Font-color', 'font color'),
		'status' => '',
		'description' => array(
			'list' => array(
				lang('This is the main font color', 'main font color description'),
			),
		),
		'type' => 'theme',
		'value' => 'color_picker',
	);
	
	$options['tunegazelle_text_secondary_color'] = array(
		'name' => lang('Secondary font-color', 'secondary font color'),
		'status' => '',
		'description' => array(
			'list' => array(
				lang('This is the secondary font color', 'secondary font color description'),
			),
		),
		'type' => 'theme',
		'value' => 'color_picker',
	);
	
	$options['tunegazelle_menu_color'] = array(
		'name' => lang('Menu color', 'menu color'),
		'status' => '',
		'description' => array(
			'list' => array(
				lang('This is main menu color', 'main menu color description'),
			),
		),
		'type' => 'theme',
		'value' => 'color_picker',
	);
	
	$options['tunegazelle_border_color'] = array(
		'name' => lang('Border color', 'border color'),
		'status' => '',
		'description' => array(
			'list' => array(
				lang('This is border color', 'border color description'),
			),
		),
		'type' => 'theme',
		'value' => 'color_picker',
	);
	
	return array('colors' => array(
		'name' => lang('Color Settings', 'color settings'),
		'type' => 'fieldset',
		'options' => $options
	));
}

function theme_tunegazelle_header()
{	
	if(isset($GLOBALS['output']['is_callback']))
		return;
	
	?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<?php theme('redirect_block'); ?>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title><?php print setting('html_name'); ?></title>
<meta name="google-site-verification" content="K3Em8a7JMI3_1ry5CNVKIHIWofDt-2C3ohovDq3N2cQ" />
<script type="text/javascript" src="<?php print url('template/tunegazelle/scripts'); ?>"></script>
<link rel="stylesheet" href="<?php print url('template/tunegazelle/styles'); ?>" type="text/css"/>
<link rel="stylesheet" href="<?php print url('template/tunegazelle/colors.css'); ?>" type="text/css"/>
<script type="text/javascript">
	var new_folders = null;
	var new_folder_timer = null
	
	$(window).scroll(function(e) {
		var max_height = 0;
		$('.folders:not(.hidden) ul, #content').each(function () {
			max_height = Math.max(max_height, $(this).height());
		});
		$('#content').height(max_height);
		$('.folders:not(.hidden) ul').each(function () {
			if($('#heading').outerHeight() + $('#controls').outerHeight() - $(window).scrollTop() < ($(window).height() - $('#details:not(:hidden)').outerHeight()) + $(window).scrollTop() - $(this).height())
				$(this).offset({top: ($(window).height() - $('#details:not(:hidden)').outerHeight()) + $(window).scrollTop() - $(this).height()});
			else
				$(this).offset({top: $('#heading').outerHeight() + $('#controls').outerHeight() - $(window).scrollTop()});
		});
	});
	
	$(document).ready(function() {
		
		setup_folders($('.folders'));
		
		// set up some ajax buttons
		$('#heading .settings').click(function () {
			if(!$('#tab-strip .settings').is('.current-tab'))
			{
				$('#tab-strip .current-tab').removeClass('current-tab').addClass('inactive-tab');
				$('#tab-strip .settings').removeClass('inactive-tab').addClass('current-tab');
				$('.folders').addClass('hidden').hide();
				$('.folders.settings').removeClass('hidden').width(0).animate({width:200}, 300);
			}
			return false;
		});
		
		// set up login form
		$('#heading .login').click(function () {
			if(!$('#tab-strip .login').is('.current-tab'))
			{
				$('#tab-strip .current-tab').removeClass('current-tab').addClass('inactive-tab');
				$('#tab-strip .login').removeClass('inactive-tab').addClass('current-tab');
				$('.folders').addClass('hidden').hide();
				$('.folders.login').removeClass('hidden').width(0).animate({width:200}, 300);
			}
			return false;
		});
		
		$('#login iframe').load(function () {
			//alert(this.contentDocument.body.scrollHeight);
			//$(this).height(this.contentDocument.body.scrollHeight);
		});
	});
	
	function setup_folders(selector)
	{

		if(selector.is('.loaded'))
		{
			if(selector.find('a').length > 0)
			{
				selector.mouseenter(function () {
					$(this).removeClass('loaded')
					.animate({left:200}, 500);
					$(this).prevAll('.folders:not(.hidden):last')
					.animate({width: 0}, 500, function () {
						$(this).addClass('hidden');
						selector.unbind('mouseenter');
					});
				});
			}
			else
			{
				selector.hover(function () {
					$(this).removeClass('loaded')
				}, function () {
					$(this).animate({width:0}, 200, function() {
						$(this).remove();
					});
				});
			}
		}
				
		selector.mouseenter(function () {
			$(this).animate({width: 200});
		});
		
		// set up folder hover actions
		selector.find('li').hover(function () {
			// change max-width so the hover doesn't go outside the menu
			$(this).css('max-width', $(window).width() - 230);
			
			// pause for a second and start ajax request
			clear_folder_load();
			if($(this).find('a').length > 0)
				new_folder_timer = setTimeout('load_folders("' + $(this).find('a').attr('href')+ '")', 1000)
			
			// clear old animations and stop the scroller
			$(this).parent().stop().focus();
			
			// if we get to the bottom of the scroller, move it up
			var compare_bottom = $('#details:not(:hidden)').length > 0 ? $('#details').offset().top : ($(window).height() + $(window).scrollTop());
			var compare_top = $('#heading').outerHeight() + $('#controls').outerHeight() + $(window).scrollTop();
			if($(this).offset().top + $(this).outerHeight() + 10 > compare_bottom)
			{
				$(this).parent().animate({ 
					top: (compare_bottom - $(window).scrollTop()) - ($(this).offset().top - $(this).parent().offset().top) - $(this).outerHeight() - 15
				}, {
					duration: 300
				});
			} 
			// if we get to the top of the scroller move it down
			else if ($(this).offset().top - 10 < compare_top)
			{
				$(this).parent().animate({ 
					top: -($(this).offset().top - $(this).parent().offset().top) + (compare_top - $(window).scrollTop()) + 15
				}, {
					duration: 300
				});
			}
		}, function () {
			// delete the placeholder
			clear_folder_load();
		});
	}
	
	function load_folders(path)
	{
		$('<div class="folders loading" style="width:0px; position:fixed; left:400px;"><div class="loading-icon"></div></div>')
		 .insertAfter($('.folders:last'))
		 .animate({width: 200}, 300);
		
		var get_data = {is_callback: true};
		if(path.match(/\/select\//i))
			get_data.dirs_only = true;
		else
			get_data.menus_only = true;
		new_folders = $.ajax({
			url: path,
			data: get_data,
			async: true,
			success: function(data, status, xhr) {
				return;
				if(status)
				{
					var loaded = $('.folders.loading');
					loaded.append($(data)).removeClass('loading').addClass('loaded')
					 .find('.loading-icon').remove();
					setup_folders(loaded);
				}
			},
			error: function () {
			}
		});
	}
	
	function clear_folder_load()
	{
		if(new_folders)
		{
			$('.folders.loading').addClass('aborting').removeClass('loading').animate({width:0}, function() {$(this).remove()});
			new_folders.abort();
			new_folders = null;
		}
		if(new_folder_timer)
		{
			clearTimeout(new_folder_timer);
			new_folder_timer = null;
		}
		$('.folders.loading').remove();
		setTimeout('$(".folders.loaded").animate({width:0}, 200, function() { $(this).remove()})', 300);
	}
	
	function hexFromRGB(r, g, b) {
		var hex = [
			r.toString( 16 ),
			g.toString( 16 ),
			b.toString( 16 )
		];
		$.each( hex, function( nr, val ) {
			if ( val.length === 1 ) {
				hex[ nr ] = "0" + val;
			}
		});
		return hex.join( "" ).toUpperCase();
	}
	
	function HueToRgb(m1, m2, hue) {
		var v;
		if (hue < 0)
			hue += 1;
		else if (hue > 1)
			hue -= 1;
	
		if (6 * hue < 1)
			v = m1 + (m2 - m1) * hue * 6;
		else if (2 * hue < 1)
			v = m2;
		else if (3 * hue < 2)
			v = m1 + (m2 - m1) * (2/3 - hue) * 6;
		else
			v = m1;
	
		return 255 * v;
	}
	
	function rgbFromHSL(h, s, l) {
		var m1, m2, hue;
		var r, g, b
		s /= 100;
		l /= 100;
		if (s == 0)
			r = g = b = (l * 255);
		else {
			if (l <= 0.5)
				m2 = l * (s + 1);
			else
				m2 = l + s - l * s;
			m1 = l * 2 - m2;
			hue = h / 360;
			r = HueToRgb(m1, m2, hue + 1/3);
			g = HueToRgb(m1, m2, hue);
			b = HueToRgb(m1, m2, hue - 1/3);
		}
		return {red: Math.round(r), green: Math.round(g), blue: Math.round(b)};
	}	
	
	function refreshSwatch() {
		
		var index = $(this).is('.picker_hue') ? $(this).index('.picker_hue') : ($(this).is('.picker_sat') ? $(this).index('.picker_sat') : $(this).index('.picker_lum')),
			hue = $( '.picker_hue:eq(' + index + ')' ).slider( "value" ),
			sat = $( '.picker_sat:eq(' + index + ')' ).slider( "value" ),
			lum = $( '.picker_lum:eq(' + index + ')' ).slider( "value" ),
			rgb = rgbFromHSL( hue, sat, lum ),
			hex = hexFromRGB( rgb.red, rgb.green, rgb.blue ),
			bg = rgbFromHSL( $( '.picker_hue:eq(' + index + ')' ).slider( "value" ), 100, 50 );
		$( '.swatch:eq(' + index + ')' ).css( 'background-color', "#" + hex );
		$( '.picker_text:eq(' + index + ')' ).val( "#" + hex );
		$( '.picker_sat:eq(' + index + ')' ).css( 'background-color', "#" + hexFromRGB( bg.red, bg.green, bg.blue ) );
		$( '.picker_lum:eq(' + index + ')' ).css( 'background-color', "#" + hexFromRGB( bg.red, bg.green, bg.blue ) );

		if(index == 0 && $('#auto_color').is(':checked'))
		{			
			var main_hue = $( '.picker_hue:eq(0)' ).slider( "value" );
			var main_sat = $( '.picker_sat:eq(0)' ).slider( "value" );
			var main_lum = $( '.picker_lum:eq(0)' ).slider( "value" );
			<?php
			// use defaults to set differences
			$default_colors = get_default_settings(array(), 'tunegazelle');
			$count = 1;
			foreach($default_colors as $setting => $default_value)
			{
				if(substr($setting, -6) == '_color' && $setting != 'tunegazelle_main_color')
				{
					list($picker0_hue, $picker0_sat, $picker0_lum) = RGBToHSL($default_colors['tunegazelle_main_color']);
					list($picker1_hue, $picker1_sat, $picker1_lum) = RGBToHSL($default_colors[$setting]);
					
					?>
					$( '.picker_hue:eq(<?php print $count; ?>)' ).slider('value', main_hue - <?php print $picker0_hue - $picker1_hue; ?> < 0 ? main_hue - <?php print $picker0_hue - $picker1_hue; ?> + 360 : main_hue - <?php print $picker0_hue - $picker1_hue; ?>);
					$( '.picker_sat:eq(<?php print $count; ?>)' ).slider('value', main_sat - <?php print $picker0_sat - $picker1_sat; ?> < 0 ? main_sat - <?php print $picker0_sat - $picker1_sat; ?> + 100 : main_sat - <?php print $picker0_sat - $picker1_sat; ?>);
					$( '.picker_lum:eq(<?php print $count; ?>)' ).slider('value', main_lum - <?php print $picker0_lum - $picker1_lum; ?> < 0 ? main_lum - <?php print $picker0_lum - $picker1_lum; ?> + 100 : main_lum - <?php print $picker0_lum - $picker1_lum; ?>);
					<?php
					
					$count++;
				}
			} 
			?>
		}
	}
	
	</script>
</head>
<body class="<?php print $GLOBALS['output']['module']; ?>">
	<div id="heading">
		<h1><?php print setting('html_name'); ?></h1>
		<a href="<?php print url('admin'); ?>" class="settings"><span><?php print lang('Settings', 'settings'); ?></span></a>
		<a href="<?php print $GLOBALS['output']['user']['Username'] == 'guest' ? url('users/login') : url('users/logout'); ?>" class="<?php print $GLOBALS['output']['user']['Username'] == 'guest' ? 'login' : 'logout'; ?>">
			<span><?php print $GLOBALS['output']['user']['Username'] == 'guest' ? lang('Login', 'login') : lang('Logout', 'logout'); ?></span>
		</a>
	</div>
	<div id="left-menu">
		<div id="inner-list">
			<ul>
				<li><?php print lang('My files', 'my files'); ?></li>
				<li><?php print lang('Playlists', 'playlists'); ?></li>
				<li><?php print lang('Uploads', 'uploads'); ?></li>
				<li><?php print lang('Recently added', 'recently added'); ?></li>
				<li><?php print lang('Feeds', 'feeds'); ?></li>
			</ul>
		</div>
	</div>
	<div id="controls">
		<div id="tab-strip">
			<div class="<?php print $GLOBALS['output']['module'] == 'select' ? 'current-tab' : 'inactive-tab'; ?> files"><?php print lang('Files', 'files'); ?></div>
			<div class="<?php print $GLOBALS['output']['module'] == 'module' ? 'current-tab' : 'inactive-tab'; ?> settings"><?php print lang('Settings', 'settings'); ?></div>
			<div class="<?php print $GLOBALS['output']['module'] == 'users' ? 'current-tab' : 'inactive-tab'; ?> login"><?php print lang('Login', 'login'); ?></div>
			<div class="<?php print $GLOBALS['output']['module'] == 'menu' ? 'current-tab' : 'inactive-tab'; ?> menu"><?php print $GLOBALS['output']['current_menu']['name']; ?></div>
		</div>
		<div id="search-box"><div id="search-icon"></div><input type="text" id="search" name="search" value="Search" /></div>
		<div id="handlers"><?php theme('menu_block', get_menu('select')); ?></div>
		<div id="list-tabs">
			<div class="current-tab"><?php print lang('Playlist', 'playlist'); ?></div>
			<div class="inactive-tab"><?php print lang('Downloads', 'downloads'); ?></div>
		</div>
		<div id="view-control"></div>
	</div>
	<div id="folder-previous"></div>
	<?php 
	if($GLOBALS['output']['module'] == 'select') 
	{ 
		?><div class="folders"><?php theme('select_block', true); ?></div><?php 
	}
	?>
	<div class="folders settings <?php print $GLOBALS['output']['module'] != 'module' ? 'hidden' : ''; ?>"><?php theme('menu_block', get_menu('admin/module')); ?></div>
	<div class="folders login <?php print $GLOBALS['output']['module'] != 'users' ? 'hidden' : ''; ?>"><?php theme('menu_block', get_menu('users')); ?></div>
	<div class="folders menu <?php print $GLOBALS['output']['module'] != 'menu' ? 'hidden' : ''; ?>"><?php theme('menu_block'); ?></div>
	<div id="content">
	<?php
	
	theme('errors_block');
}

function RGBToHSL($hex) {
  $r = hexdec(substr($hex, 1, 2)) / 255;
  $g = hexdec(substr($hex, 3, 2)) / 255;
  $b = hexdec(substr($hex, 5, 2)) / 255;
  $min = min($r, min($g, $b));
  $max = max($r, max($g, $b));
  $delta = $max - $min;
  $l = ($min + $max) / 2;
  $s = 0;
  if ($l > 0 && $l < 1) {
    $s = $delta / ($l < 0.5 ? (2 * $l) : (2 - 2 * $l));
  }
  $h = 0;
  if ($delta > 0) {
    if ($max == $r && $max != $g) $h += ($g - $b) / $delta;
    if ($max == $g && $max != $b) $h += (2 + ($b - $r) / $delta);
    if ($max == $b && $max != $r) $h += (4 + ($r - $g) / $delta);
    $h /= 6;
  }
  return array($h * 360, round($s * 100), round($l * 100));
}

function theme_tunegazelle_form_color_picker($config)
{
	list($hue, $sat, $lum) = RGBToHSL(setting($config['field']));
	
	?>
	<div id="picker_hue_<?php print $config['field']; ?>" class="picker_hue"></div>
	<div id="picker_sat_<?php print $config['field']; ?>" class="picker_sat"></div>
	<div id="picker_lum_<?php print $config['field']; ?>" class="picker_lum"></div>
	
	<div class="swatch"></div>
	<input type="text" name="setting_<?php print $config['field']; ?>" value="<?php print setting($config['field']); ?>" class="picker_text" />
	<script type="text/javascript">
	$(document).ready(function() {
		$('#picker_hue_<?php print $config['field']; ?>').slider({
			orientation: "horizontal",
			range: "min",
			max: 360,
			value: 127,
			slide: refreshSwatch,
			change: refreshSwatch
		});
		
		$( "#picker_sat_<?php print $config['field']; ?>, #picker_lum_<?php print $config['field']; ?>" ).slider({
			orientation: "horizontal",
			range: "min",
			max: 100,
			value: 50,
			slide: refreshSwatch,
			change: refreshSwatch
		});
		$( "#picker_hue_<?php print $config['field']; ?>" ).slider( "value", <?php print $hue; ?> );
		$( "#picker_sat_<?php print $config['field']; ?>" ).slider( "value", <?php print $sat; ?> );
		$( "#picker_lum_<?php print $config['field']; ?>" ).slider( "value", <?php print $lum; ?> );
	});
	</script>
	<?php
	
	if($config['field'] == 'tunegazelle_main_color')
	{
		?><input type="checkbox" id="auto_color" /><?php print lang('Automatically set the colors below.', 'auto color below'); ?>
		<?php
	}
}

function theme_tunegazelle()
{
	theme('header');
	
	theme('footer');
}

function theme_tunegazelle_debug_error($id, $error, $no_code = false)
{
	if($error->code & (E_ALL|E_STRICT))
		$class = 'php_error';
	elseif($error->code & E_DATABASE)
		$class = 'db_error';
	elseif($error->code & E_VERBOSE)
		$class = 'verbose_error';
	else
		$class = '';
		
	if(($error->code & E_DATABASE) > 0 && dependency('code'))
	{
		$code = get_code_html($error->message, 'sql');
		$error->message = $code['HTML'];
		$error->htmlspecialchars = false;
	}
	else
	?>
	<a href="#" class="msg <?php print $class; ?>" onClick="$('#error_<?php print $id; ?>').toggle(); return false;"><?php print (isset($error->time)?('[' . round($error->time, 3) . ']'):'') . (isset($error->memory_usage)?('[' . format_bytes($error->memory_usage, 2) . ']'):'') . ($error->htmlspecialchars ? htmlspecialchars($error->message) : $error->message) . ((isset($error->count) && $error->count > 0)?(' repeated ' . $error->count . ' time(s)'):''); ?></a>
	<?php
	if(!$no_code)
	{
		?>
		<div id="error_<?php print $id; ?>" style="display:none;">
			<code>
				<pre>
	<?php print htmlspecialchars(print_r($error, true)); ?>
				</pre>
			</code>
		</div>
		<?php
	}
}

function theme_tunegazelle_debug_block()
{
	?><div id="debug" class="debug hide">
	<a id="hide_link" href="#"><?php print lang('Show / Hide', 'debug show hide'); ?></a>
	<script type="text/javascript">
		$('#hide_link').click(function () {
			$('#debug').toggleClass('hide');
			return false;
		})
	</script>
	<?php
	foreach($GLOBALS['debug_errors'] as $i => $error)
	{
		theme('debug_error', $i, $error);
	}
	
	if(isset($GLOBALS['output']['requests']) && count($GLOBALS['output']['requests']) > 0)
	{
		foreach($GLOBALS['output']['requests'] as $j => $request)
		{
			?>
			<a href="#" class="msg" onclick="$('#request_<?php print $j; ?>').toggle(); return false;"><?php print lang('Request made on ', 'debug request made on'); ?> <?php print $request['Time']; ?></a>
			<div id="request_<?php print $j; ?>" style="display:none;"><?php
			$errors = unserialize(gzinflate($request['Errors']));
			foreach($errors['debug'] as $i => $error)
			{
				theme('debug_error', $i, $error, true);
			}
			?></div><?php
		}
	}
	
	?></div><?php
}

function theme_tunegazelle_errors_block()
{
	$error_list = array('warn_errors', 'user_errors', 'note_errors');
	
	$has_errors = false;
	foreach($error_list as $i => $errors)
	{
		if(count($GLOBALS[$errors]) > 0)
		{
			$has_errors = true;
			?><div id="<?php print (isset($GLOBALS['output']['errors_only']) && 
				$GLOBALS['output']['errors_only'])?($errors . '_only'):$errors; ?>"><?php
			foreach($GLOBALS[$errors] as $i => $error)
			{
				if($i == 5)
				{
					?><div id="inner_<?php print $errors; ?>" class="error hide"><?php
				}
				?><b><?php print theme('info_objects', $error); ?></b><br /><?php
			}
			if(count($GLOBALS[$errors]) > 5)
			{
				?></div>
				And <?php print count($GLOBALS[$errors]) - 5; ?> more: <a href="#" onClick="if(!this.hidden) { document.getElementById('inner_<?php print $errors; ?>').className='error hide'; this.hidden=true; this.innerHTML = 'Un Hide'; } else { document.getElementById('inner_<?php print $errors; ?>').className='error'; this.hidden=false; this.innerHTML = 'Hide'; }">Un Hide</a>
				<?php
			}
			?></div><?php
			
			$GLOBALS[$errors] = array();
		}
	}
	
	if($has_errors)
	{
		?><div class="titlePadding"></div><?php
	}
	
	if(!$errors_only)
	{
		?>
		<div id="tmp_errors"></div>
		<script type="text/javascript">
			$(document).ready(function() {
				$.get('<?php print url('errors_only', true); ?>',function(data, status, xhr){
					$('#tmp_errors').html(data);
					
					$('#warn_errors').append($('#warn_errors_only'));
					$('#user_errors').append($('#user_errors_only'));
					$('#note_errors').append($('#note_errors_only'));
					
					$('#tmp_errors').remove();
				}, 'html');
			});
		</script>
		<?php
	}
}

function theme_tunegazelle_select()
{
	if(!isset($GLOBALS['output']['dirs_only']) || !$GLOBALS['output']['dirs_only'])
	{
		theme('header');
		
		theme('select_block');
		
		theme('footer');
	}
	else
	{
		theme('select_block', true);
	}
}

function theme_tunegazelle_select_block($folders = false)
{
	if(!$folders)
	{
		?><table id="files"><?php

		$columns = get_all_columns();
		$count = 0;
		if(isset($GLOBALS['output']['files']))
		{
			foreach($GLOBALS['output']['files'] as $i => $file) { 
				$html = format_file($file);
			
				// make links browsable
				if($file['Filemime'] == FOLDER_MIME)
					$link = url('select/' . $GLOBALS['output']['handler'] . '/' . $html['Filepath']);
				else
					$link = url('files/' . $GLOBALS['output']['handler'] . '/' . $file['id'] . '/' . urlencode($file['Filename']));
				
				if($file['Filemime'] != FOLDER_MIME)
				{
					$count++;
					
					?><tr class="file <?php print $i % 2 ? 'even' : 'odd'; ?>" style="top:<?php print $i * 22; ?>px"><?php
					foreach($columns as $j => $column)
					{
						?><td class="cell column_<?php print strtolower(htmlspecialchars($column, ENT_QUOTES)); ?>"><div><a href="<?php print $link; ?>"><?php print isset($html[$column]) ? $html[$column] : ''; ?></a></div></td><?php
					}
					
					?></tr><?php
				}
			}
		}
		
		if($count == 0) { ?>
			<tr><td colspan="<?php count(get_all_columns()); ?>"><?php print lang('No files to display.', 'no files'); ?></td></tr>
		<?php }
		
		?></table><?php
	}
	else
	{
		?><ul><?php
		 
		$count = 0;
		if(isset($GLOBALS['output']['files']))
		{
			foreach($GLOBALS['output']['files'] as $i => $file)
			{
				if($file['Filemime'] == FOLDER_MIME)
				{
					$html = format_file($file);
					
					$link = url('select/' . $GLOBALS['output']['handler'] . '/' . $html['Filepath']);
				
					$count++;
					?><li><span class="folder-icon"></span><a href="<?php print $link; ?>"><?php print $html['Filename']; ?></a></li><?php 
				}
			}
		}
		
		if($count == 0) { ?>
			<li><?php print lang('No folders to display.', 'no folders'); ?></li>
		<?php } 
		
		?></ul><?php
	}
}

function theme_tunegazelle_footer()
{
	if(isset($GLOBALS['output']['is_callback']))
		return;
		
	?>
	</div>
	<div id="right-menu">
	</div>
	<div id="details" <?php print $GLOBALS['output']['module'] == 'select' ? '' : 'style="display:none;"'; ?>><img class="icon" /><span class="filename">Shared</span><span class="filetype">Folder</span></div>
	<?php
	theme('debug_block');
	?>
	</body>
	</html>
	
	<?php
}
