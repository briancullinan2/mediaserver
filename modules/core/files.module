<?php

function menu_files()
{
	return array(
		'files/%handler/%id/%files/%extra/%filename' => array(
			'callback' => 'output_files',
		),
		'files/%handler/%id/%files/%filename' => array(
			'callback' => 'output_files',
		),
		'files/%handler/%id/%filename' => array(
			'callback' => 'output_files',
		),
		'files/%handler/%id' => array(
			'callback' => 'output_files',
		),
		'files/%search' => array(
			'callback' => 'output_files',
		),
	);
}

function validate_files($request)
{
	// just about everything uses the cat variable so always validate and add this
	$request['handler'] = validate($request, 'handler');
}


function validate_handler($request)
{
	if(isset($request['handler']) && is_handler($request['handler']))
		return $request['handler'];
	else
		return 'files';
}


/**
 * Implementation of validate
 * @ingroup validate
 * @return NULL by default, accepts any file name
 */
function validate_filename($request)
{
	// just return the same, this is only used for pretty dirs and compatibility
	if(isset($request['filename']))
	{
		// remove any slashes that still exist in the file name
		if(strpos($request['filename'], '/') !== false)
			$request['filename'] = substr($request['filename'], -strrpos($request['filename'], '/') + 1);
		if(strpos($request['filename'], '\\') !== false)
			$request['filename'] = substr($request['filename'], -strrpos($request['filename'], '\\') + 1);
		
		// return the filename
		return generic_validate_filename($request, 'filename');
	}
}

/**
 * Implementation of validate
 * @ingroup validate
 * @return NULL by default, validate input is a directory inside an archive or disk image, a directory directly on the filesystem, or a directory handled by the selected wrapper handler
 */
function validate_dir($request)
{
	// if this is not validated completely it is OK because it will be fixed in the db_file handler when it is looked up
	//   this shouldn't cause any security risks
	if(isset($request['dir']))
	{
		// this is needed to make sure the directory is handled by something
		$request['handler'] = validate($request, 'handler');
		
		// add leading slash
		if(substr($request['dir'], 0, 1) != '/')
			$request['dir'] = '/' . $request['dir'];
			
		// add trailing slash
		if(substr($request['dir'], -1) != '/' && substr($request['dir'], -1) != '\\')
			$request['dir'] .= '/';
		
		// replace directory with actual path
		if(setting('alias_enable'))
			$tmp = alias_replace($request['dir']);
		else
			$tmp = $request['dir'];
			
		// this checks the input 'dir' is on the actual file system
		if(is_dir(realpath($tmp)) || 
			// this check the 'dir' for directories inside archives and disk images
			handles($request['dir'], $request['handler']) == true ||
			// this check the dir for wrappers, wrappers can handle their own dir
			is_wrapper($request['handler'])
		)
			return $request['dir'];
		else
			raise_error('Directory does not exist!', E_USER);
	}
}

/**
 * Implementation of validate
 * @ingroup validate
 * @return NULL by default, accepts files on the actual file system, or files handled by a handler other than db_file/fs_file
 */
function validate_file($request)
{
	// if this is not validated completely it is OK because it will be fixed in the db_file handler when it is looked up
	//   this shouldn't cause any security risks
	if(isset($request['file']))
	{
		$request['handler'] = validate($request, 'handler');
		
		// add leading slash
		if(substr($request['file'], 0, 1) != '/')
			$request['file'] = '/' . $request['file'];
		
		// replace directory with actual path
		if(setting('alias_enable'))
			$tmp = alias_replace($request['file']);

		if(is_file(realpath($tmp)) || handles($request['file'], $request['handler']) == true)
			return $request['file'];
		else
			raise_error('File does not exist!', E_USER);
	}
}

/**
 * Implementation of validate
 * @ingroup validate
 * @return true by default
 */
function validate_dirs_only($request)
{
	return generic_validate_boolean_true($request, 'dirs_only');
}


/**
 * Implementation of always output
 * @ingroup always_output
 */
function file_variables($request)
{
	// some templates refer to the dir to determine their own location
	if(isset($request['dir'])) register_output_vars('dir', $request['dir']);
	
	// set filename, just a helper for templates to set content disposition
	if(isset($request['filename'])) register_output_vars('filename', $request['filename']);

	// most template pieces use the category variable, so set that
	register_output_vars('handler', $request['handler']);
}

/**
 * this is a common function for handlers, just abstracting the information about a file
 * @param file The file to get the info for
 * @return an associative array of information that can be inserted directly in to the database
 */
function get_info_files($file)
{
	$file = str_replace('/', DIRECTORY_SEPARATOR, $file);
	
	$fileinfo = array();
	$fileinfo['Filepath'] = str_replace('\\', '/', $file);
	$fileinfo['Filename'] = basename($file);
	$fileinfo['Filesize'] = file_exists($file)?filesize($file):0;
	$fileinfo['Filemime'] = mime($file);
	$fileinfo['Filedate'] = file_exists($file)?date('Y-m-d h:i:s', filemtime($file)):date('Y-m-d h:i:s', 0);
	$fileinfo['Filetype'] = type($file);
	
	return $fileinfo;
}


function sql_files_ids($files, $handler)
{
	$sql = '';
	foreach($files as $i => $file)
	{
		$sql .= $handler . '_id = ' . addslashes($file['id']) . ' OR ';
	}
	return substr($sql, 0, -3);
}

function sql_ids_files($files, $handler)
{
	$sql = '';
	foreach($files as $i => $file)
	{
		$sql .= 'id = ' . addslashes($file[$handler . '_id']) . ' OR ';
	}
	return substr($sql, 0, -3);
}


function sql_files($files)
{
	$sql = '';
	foreach($files as $i => $file)
	{
		$sql .= 'Filepath = "' . addslashes($file['Filepath']) . '" OR ';
	}
	return substr($sql, 0, -3);
}

// this is used it a couple place so it is abstracted
function sql_filepath($filepath)
{
	return 'LEFT(Filepath, ' . strlen($filepath) . ') = "' . addslashes($filepath) . '" AND ' . 
		'(LOCATE("/", Filepath, ' . (strlen($filepath)+1) . ') = 0 OR ' . 
		'LOCATE("/", Filepath, ' . (strlen($filepath)+1) . ') = LENGTH(Filepath)) AND ' . 
		'Filepath != "' . addslashes($filepath) . '"';
}

function sql_columns($columns)
{
	return implode(',', $columns);
}

function filter_file($request)
{
	if(isset($request['file']))
	{
		$request['file'] = str_replace('\\', '/', $request['file']);
		
		// this is necissary for dealing with windows and cross platform queries coming from templates
		if($request['file'][0] == DIRECTORY_SEPARATOR) $request['file'] = realpath('/') . substr($request['file'], 1);
		
		// replace aliased path with actual path
		if(setting('alias_enable'))
			$request['file'] = alias_replace($request['file']);
			
		// if the id is available, try to use that instead
		if(isset($request[$request['handler'] . '_id']) && $request[$request['handler'] . '_id'] != 0)
			$sql = 'id = ' . $request[$request['handler'] . '_id'] . ' OR Filepath = "' . addslashes($request['file']) . '"';
		else
			$sql = 'Filepath = "' . addslashes($request['file']) . '"';
			
		return array('where' => $sql, 'limit' => 1);
	}
}

function filter_dir($request)
{
	$request['selected'] = validate($request, 'selected');
	if(!empty($request['selected']) || !empty($request['file']))
		return;
	
	// add dir filter to where
	if(isset($request['dir']))
	{
		if($request['dir'] == '') $request['dir'] = '/';
		
		// this is necissary for dealing with windows and cross platform queries coming from templates
		//  yes: the template should probably handle this by itself, but this is convenient and easy
		//   it is purely for making all the paths look prettier
		if($request['dir'][0] == '/') $request['dir'] = realpath('/') . substr($request['dir'], 1);

		// replace separator
		$request['dir'] = str_replace('\\', '/', $request['dir']);
		
		// replace aliased path with actual path
		if(setting('alias_enable'))
			$request['dir'] = alias_replace($request['dir']);
			
		// maybe the dir is not loaded yet, this part is costly but it is a good way to do it
		if(setting('deep_select'))
			scan_watched_files($request['dir']);
		
		// make sure file exists if we are using the file handler
		if(handles($request['dir'], $request['handler']))
		{
			// if the includes is blank then only show files from current directory
			if(!isset($request['search']))
			{
				if(isset($request['dirs_only']))
					$sql = 'LEFT(Filepath, ' . strlen($request['dir']) . ') = "' . addslashes($request['dir']) . '" AND LOCATE("/", Filepath, ' . (strlen($request['dir'])+1) . ') = LENGTH(Filepath)';
				else
					$sql = sql_filepath($request['dir']);
				
				// put folders at top if the handler supports a filetype
				if(in_array('Filetype', get_columns($request['handler'])))
				{
					$order = '(Filetype = "FOLDER") DESC';
				}
			}
			// show all results underneath directory
			else
			{
				if(isset($request['dirs_only']))
					$sql = 'LEFT(Filepath, ' . strlen($request['dir']) . ') = "' . addslashes($request['dir']) . '" AND RIGHT(Filepath, 1) = "/" AND Filepath != "' . addslashes($request['dir']) . '"';
				else
					$sql = 'LEFT(Filepath, ' . strlen($request['dir']) . ') = "' . addslashes($request['dir']) . '" AND Filepath != "' . addslashes($request['dir']) . '"';
			}
			
			if(isset($order))
				return array('order' => $order, 'where' => $sql);
			else
				return array('where' => $sql);
		}
	}
}

function filter_files($request, $index)
{
	switch($index)
	{
		case 'file':
			return filter_file($request);
		case 'dir':
			return filter_dir($request);
	}
}

/**
 * @defgroup handle Handle File Functions
 * Functions that read file information and store in the database
 * @param file the file to add to the database
 * @param force force checking if the file is in the database and add it
 * @return The ID for the file added to the database, or false if nothing was done or it isn't handled
 * @{
 */
 
function add_all($file, $force = false)
{
	// first add id
	$fileid = add($file, false, 'ids');
	
	$ids = array();
	foreach(get_handlers(false) as $module => $config)
	{
		$fileinfo = add($file, $force, $module);
		if($fileinfo !== false)
			$ids[$module . '_id'] = $fileinfo['id'];
	}
	
	// update ids
	db_query('UPDATE ids ' . sql_update($ids) . ' WHERE id=' . $fileid['id'], array_values($ids));

}

/**
 * Implementation of handle
 */
function add($file, $force = false, $handler = 'files')
{
	$file = str_replace('\\', '/', $file);
	
	// maybe a fileinfo was passed in by mistake
	if(is_array($file))
	{
		raise_error('File is an Array!', E_DEBUG);
		
		if(isset($file['Filepath']))
			$file = $file['Filepath'];
	}
	
	if(!is_string($file))
	{
		raise_error('File is not a string!', E_DEBUG);
		
		return false;
	}
	
	// files always qualify, we are going to log every single one!
	if(!handles($file, $handler))
		return false;
	
	// if there is an add_handler function specified use that instead
	if(module_implements('add', $handler))
		return invoke_module('add', $handler, array($file, $force));
	
	// return false if there is no info function
	elseif(!module_implements('get_info', $handler))
	{
		raise_error('No get info function or add function exists for ' . $handler . ' so an add_\'' . $handler . '()\' function should be supplied.', E_DEBUG);
		
		return false;
	}
	
	// check if it is in the database
	$files = db_assoc('SELECT * FROM ' . $handler . ' WHERE Filepath=? LIMIT 1', array($file));
	
	if( count($files) == 0 )
	{
		// get file information
		$fileinfo = invoke_module('get_info', $handler, array($file));
		if(!isset($fileinfo) || !is_array($fileinfo))
			return false;
		
		// always add to file database
		raise_error('Adding ' . $handler . ': ' . $file, E_DEBUG);
		
		// add to database
		$id = db_insert('INSERT INTO ' . $handler . sql_insert($fileinfo), array_values($fileinfo));
		
		return array('id' => $id) + $fileinfo;
	}
	// not dependent on force because it checks for modification
	elseif($handler == 'files')
	{
		// update file if modified date has changed
		if( date("Y-m-d h:i:s", filemtime($file)) != $files[0]['Filedate'] )
		{
			// get file information
			$fileinfo = invoke_module('get_info', 'files', array($file));
		
			raise_error('Modifying file: ' . $file, E_DEBUG);
			
			// update database
			$id = db_query('UPDATE files ' . sql_update($fileinfo) . ' WHERE id=' . $files[0]['id'], array_values($fileinfo));
			
			return array('id' => $id) + $fileinfo;
		}
	}
	elseif($force == true)
	{
		// get file information
		$fileinfo = invoke_module('get_info', $handler, array($file));
		if(!isset($fileinfo) || !is_array($fileinfo))
			return false;
		
		raise_error('Modifying ' . $handler . ': ' . $file, E_DEBUG);
		
		// update database
		$id = db_query('UPDATE ' . $handler . sql_update($fileinfo) . ' WHERE id=' . $files[0]['id'], array_values($fileinfo));
		
		return array('id' => $id) + $fileinfo;
	}

	raise_error('Skipping ' . $handler . ': ' . $file, E_DEBUG);
	
	return array('id' => $files[0]['id']) + $files[0];
}

/**
 * @}
 */

/**
 * @defgroup output_handler Output Handler Functions
 * Functions that output the provided file
 * @param file the file to output
 * @return a stream handle for use with fread, or false if there was an error
 * @{
 */
 
/**
 * Output a handler file stream
 */
function output_handler($file, $handler)
{
	$file = str_replace('\\', '/', $file);
	
	if(setting('alias_enable'))
		$file = alias_replace($file);
	
	if($handler == 'files')
	{
		// load file from file system
		if(handles($file, $handler) && is_file($file))
		{
			if(($fp = @fopen($file, 'rb')))
			{
				return $fp;
			}
		}
		
	}
	elseif(module_implements('output', $handler))
		return invoke_module('output', $handler, array($file, $handler));
	elseif(is_wrapper($handler) && module_implements('output', get_module($handler, 'wrapper')))
		return invoke_module('output', get_module($handler, 'wrapper'), array($file, $handler));
	
	return false;
}

/**
 * Implementation of output_handler
 * no headers is used to prevent changing the headers, if it is called by a module it may just need the stream and no header changes
 */
function output_files($request)
{
	set_time_limit(0);

	// set up request variables
	$request['handler'] = validate($request, 'handler');
	$request['selected'] = validate($request, 'selected');
	
	if(!isset($request['id']))
	{
		raise_error('You must select a file for download!', E_USER);
		theme();
		return;
	}

	// get the file path from the database
	$files = get_files($request, $count);
	if(count($files) == 0)
	{
		raise_error('File not found!', E_USER);
		theme();
		return;
	}
	
	// set up the output stream
	$of = fopen('php://output', 'wb');
	
	// get the input stream
	$if = output_handler($files[0]['Filepath'], $request['handler']);
	list($headers) = parse_headers(headers_list());

	// set some general headers
	header('Content-Transfer-Encoding: binary');
	if(!isset($headers['content-type']))
		header('Content-Type: ' . $files[0]['Filemime']);
	if(isset($headers['content-length']))
		$files[0]['Filesize'] = $headers['content-length'];
	header('Content-Disposition: attachment; filename="' . $files[0]['Filename'] . '"');
	
	// close session now so they can keep using the website
	if(isset($_SESSION)) session_write_close();
	
	if(!is_resource($if) || !is_resource($of))
	{
		raise_error('Cannot open file!', E_USER);
		theme();
		return;
	}
	
	// output file with ranges from server
	list($seek_start) = output_ranges($files[0]['Filesize']);
	
	// seek to start of missing part
	if(isset($seek_start))
		fseek($if, $seek_start);
	
	output_stream($if, $of);
}

/**
 * @}
 */

/**
 * @defgroup get_handler Handler 'Get' Functions
 * Functions that return a list of files for the specific handler
 * @param request the request information for the list of files to get from the file database
 * @param count inserts the total number of files that meet the requested criteria in the database
 * @param handler a utility parameter for other handlers to use the default file get() functionality but acting on their own columns() and DATABASE
 * @return an indexed array of files from the database
 * @{
 */

/**----------------------- Magic, do not touch -----------------------
 * - the mysql can be left null to get the files from a directory, in which case a directory must be specified
 * - if the mysql is provided, then the file listings will be loaded from the database
 * - this is a very generalized handler to provide a template for overriding, or for other handlers to modify the $request and pass to this one
 *   - other handlers are responsible for any validation of input that is not listed here, like making sure files exist on the filesystem
 */
function get_files($request, &$count)
{
	// if the handler is set, call that instead
	if($request['handler'] != 'files' && module_implements('get', $request['handler']))
		return invoke_module('get', $request['handler'], array($request, $count));
	elseif(is_wrapper($request['handler']))
		return get_files(get_module($request['handler'], 'wrapper'));
	elseif($request['handler'] != 'files')
	{
		raise_error('get_files() called with handler \'' . $request['handler'] . '\' but no get_ handler function exists! Defaulting to files', E_DEBUG);
		
		// set the cat in the request to the provided handler
		$request['handler'] = validate($request, 'handler');
	}
	
	// always apply user information to this type of query
	$request['user'] = session('users');
	
	// if using the database
	if(setting('database_enable') && setting_installed())
		$files = _get_database_files($request, $count);
	elseif(setting_installed())
		$files = _get_local_files($request, $count);
	else
		raise_error('get_files() called without any acceptable intention!', E_DEBUG);
	
	// do alterations
	if(isset($files))
	{
		foreach($files as $i => $file)
		{
			if(setting('alias_enable'))
			{
				$files[$i]['Filepath'] = paths_replace($file['Filepath']);
				// check if the replaced path was the entire alias path
				// in this case we want to replace the filename with the alias name
				$files[$i]['Filename'] = basename($files[$i]['Filepath']);
			}
		}
		return $files;
	}
}

function _get_database_files($request, &$count)
{
	// add filters to query
	$result = trigger('filter', NULL, $request);

	// compile query
	$where = array();
	$limit = array();
	$order = array();
	$group = array();
	$columns = array('*');
	foreach($result as $key => $alteration)
	{
		if(is_array($alteration))
		{
			if(isset($alteration['where'])) $where[] = $alteration['where'];
			if(isset($alteration['limit'])) $limit[] = $alteration['limit'];
			if(isset($alteration['order'])) $order[] = $alteration['order'];
			if(isset($alteration['group'])) $group[] = $alteration['group'];
			if(isset($alteration['columns'])) $columns[] = $alteration['columns'];
		}
	}
	
	// select files
	$files = db_assoc('SELECT ' . ((count($columns) > 0)?implode(', ', $columns):'') . 
		' FROM ' . $request['handler'] . ' ' . 
		((count($where) > 0)?('WHERE (' . implode(') AND (', $where) . ') '):'') . 
		((count($order) > 0)?('ORDER BY ' . implode(', ', $order)):'') . ' ' .
		((count($limit) > 0)?('LIMIT ' . $limit[0]):'')
	);
	if(!is_array($files))
	{
		$count = 0;
		return array();
	}

	// merge in all other information for the files
	if(!empty($files) && validate($request, 'short') == false)
		$files = merge_database_info($files, $request['handler']);
	
	// only get count if the query is not limited by the limit field
	//  get count if limit is not set, which is should never be because of validate()
	//  get count if it is greater than or equal to the limit, even though it will always be equal to or less then limit
	//  if it is less, only get count if start is set
	if(isset($request['file']))
		$count = count($files);
	elseif(!isset($request['limit']) || count($files) >= $request['limit'] || 
		(isset($request['start']) && $request['start'] > 0))
	{
		$result = db_assoc('SELECT count(*) FROM ' . $request['handler'] . ' ' . 
			'WHERE (' . implode(') AND (', $where) . ')'
		);
		
		$count = $result[0]['count(*)'];
	}
	else
		$count = count($files);
	
	return $files;
}

function _get_local_files($request, &$count)
{
	if(!isset($request['dir']))
		$request['dir'] = validate(array('dir' => '/'), 'dir');
	
	// get all the files from the current directory
	if(!is_module('watched') || is_watched($request['dir']))
	{
		$files = scan_directory($request['dir']);
	}
	else
	{
		$count = 0;
		return array();
	}
	
	// merge in file information
	foreach($files as $i => $file)
	{
		$files[$i] = get_info_files($file);
	}
	
	$files = merge_local_info($files);
	
	return $files;
}

function merge_id_info(&$files, $handler, &$cache_updates)
{
	
	// get ids from database
	$ids = db_assoc('SELECT * FROM ids WHERE ' . sql_files_ids($files, $handler) . ' LIMIT ' . count($files), array(), 'Filepath');

	// loop through files and add id information
	foreach($files as $i => $file)
	{
		if(!isset($ids[$file['Filepath']]))
		{
			// add id
			$ids[$file['Filepath']] = add($file['Filepath'], false, 'ids');
			
			// move passed in file ID
			$ids[$file['Filepath']][$handler . '_id'] = $file['id'];
			$cache_updates[] = $file['Filepath'];
		}

		// merge ids and replace file ID with global ID
		$files[$i] = array_merge($files[$i], $ids[$file['Filepath']]);
	}
	
}

function merge_id_info_only(&$files, $handler)
{
	// this is used for determining which files have changes made to the IDs
	$cache_updates = array();
	
	merge_id_info($files, $handler, $cache_updates);

	// update ID caching for later/more efficient use!
	foreach($files as $i => $file)
	{
		if(in_array($file['Filepath'], $cache_updates))
		{
			$ids = array_intersect_key($file, array_flip(get_id_fields()));
			db_query('UPDATE ids ' . sql_update($ids) . ' WHERE id=' . $file['id'], array_values($ids));
		}
	}
}

function merge_database_info($files, $handler)
{
	// this is used for determining which files have changes made to the IDs
	$cache_updates = array();
	
	merge_id_info($files, $handler, $cache_updates);
	
	// loop through handlers to efficiently extract IDs
	foreach(get_handlers(false) as $module => $config)
	{
		if($handler == $module)
			continue;
	
		$id_infos = array();
		
		// select files for this handler
		$handler_files = array_filter($files, create_function('$file', 'return handles($file, \'' . $module . '\');'));
	
		// select all the information with ids already associated
		$id_files = array_filter($handler_files, create_function('$file', 'return isset($file[\'' . $module . '_id\']) && $file[\'' . $module . '_id\'] != 0;'));

		// only search for ids in handler table if there are ids available
		if(count($id_files) > 0)
		{
			$columns = get_columns($module);
			if(!in_array('id', $columns))
				$columns[] = 'id';
			$id_infos = db_assoc('SELECT ' . sql_columns($columns) . ' FROM ' . $module . ' WHERE ' . sql_ids_files($id_files, $module) . ' LIMIT ' . count($id_files), array(), 'Filepath');
		}
		else
			$id_infos = array();

		// add information for the files not found by ID
		$new_infos = array_diff_key($handler_files, $id_files);
		foreach($files as $i => $file)
		{
			if(isset($new_infos[$i]))
			{
				$result = add($file['Filepath'], false, $module);
				if(is_array($result))
				{
					$files[$i] = array($module . '_id' => $result['id']) + array_merge($result, $file);
					$cache_updates[] = $file['Filepath'];
				}
			}
			elseif(isset($id_infos[$file['Filepath']]))
				$files[$i] = array($module . '_id' => $id_infos[$file['Filepath']]['id']) + array_merge($id_infos[$file['Filepath']], $file);
		}
		
	}

	// update ID caching for later/more efficient use!
	foreach($files as $i => $file)
	{
		if(in_array($file['Filepath'], $cache_updates))
		{
			$ids = array_intersect_key($file, array_flip(get_id_fields()));
			db_query('UPDATE ids ' . sql_update($ids) . ' WHERE id=' . $file['id'], array_values($ids));
		}
	}
	
	return $files;
}

function merge_local_info($files)
{
	foreach($files as $i => $file)
	{
		// always merge ids
		$fileinfo = invoke_module('get_info', 'ids', array($file['Filepath']));
		$files[$i] = array_merge($fileinfo, $files[$i]);
		
		// move hex in to id field since id will never be set otherwise
		$files[$i]['id'] = $files[$i]['Hex'];
		
		foreach(get_handlers(false) as $module => $config)
		{
			if(handles($file['Filepath'], $module))
			{
				$fileinfo = invoke_module('get_info', $module, array($file['Filepath']));
				if(is_array($fileinfo))
					$files[$i] = array_merge($fileinfo, $files[$i]);
			}
		}
	}
	
	return $files;
}

/**
 * @defgroup remove_handler Handler 'Remove' Functions
 * Functions that remove files from the database for a specific handler
 * @param file the file or folder to remove from the database
 * @param handler a utility parameter to allow handlers to use the default functionality
 * @{
 */
	
/**
 * Implementation of remove_handler
 */
function remove($file, $handler = 'files')
{
	$file = str_replace('\\', '/', $file);
	
	// files always qualify, we are going to log every single one!
	if(!handles($file, $handler))
		return false;
	
	if(module_implements('remove', $handler))
		return invoke_module('remove', $handler, array($file));
	
	// remove files with inside paths like directories
	if($file[strlen($file)-1] != '/') $file_dir = $file . '/';
	else $file_dir = $file;
	
	raise_error('Removing ' . get_module($handler, 'name') . ': ' . $file, E_DEBUG);

	// remove file(s) from database
	db_query('DELETE FROM '. $handler .' WHERE Filepath=? OR LEFT(Filepath, ' . strlen($file_dir) . ')=?', array(
		$file,
		$file_dir,
	));	

	// delete ids
	if(in_array($handler . '_id', get_id_fields()))
		invoke_module('remove', 'ids', array($file, $handler));
}

/**
 * @}
 */


/**
 * @defgroup cleanup_handler Handler 'Cleanup' Functions
 * Functions that cleanup files in the database
 * @param handler the utility parameter to allow handler to use the default file functionality but acting on their own DATABASE
 * @{
 */
	
/**
 * Implementation of cleanup_handler
 */
function cleanup($handler = 'files')
{
	// if there is a cleanup_handler function use that instead
	module_invoke('cleanup', $handler);

	/*
	// first clear all the items that are no longer in the watch list
	// since the watch is resolved all the items in watch have to start with the watched path
	$watched_where = '';
	foreach($GLOBALS['watched'] as $i => $watch)
	{
		$tmp_watch = str_replace('\\', '/', $watch['Filepath']);
		// add the files that begin with a path from a watch directory
		$watched_where .= ' LEFT(Filepath, ' . strlen($tmp_watch) . ') != "' .  addslashes($tmp_watch) . '" AND';
	}
	// remove last AND
	$watched_where = substr($watched_where, 0, strlen($watched_where)-3);
	
	// but keep the ones leading up to watched directories
	// ----------THIS IS THE SAME FUNCTIONALITY FROM THE CRON.PHP SCRIPT
	$watched_to_where = '';
	$directories = array();
	for($i = 0; $i < count($GLOBALS['watched']); $i++)
	{
		$folders = explode('/', $GLOBALS['watched'][$i]['Filepath']);
		$curr_dir = (realpath('/') == '/')?'/':'';
		// don't add the watch directory here because it is already added by the previous loop!
		$length = count($folders);
		unset($folders[$length-1]); // remove the blank at the end
		unset($folders[$length-2]); // remove the last folder which is the watch
		$between = false; // directory must be between an aliased path and a watched path
		// add the directories leading up to the watch
		for($j = 0; $j < count($folders); $j++)
		{
			if($folders[$j] != '')
			{
				$curr_dir .= $folders[$j] . '/';
				// if using aliases then only add the revert from the watch directory to the alias
				// ex. Watch = /home/share/Pictures/, Alias = /home/share/ => /Shared/
				//     only /home/share/ is added here
				if((!setting('alias_enable') || in_array($curr_dir, $GLOBALS['paths']) !== false))
				{
					// this allows for us to make sure that at least the beginning 
					//   of the path is an aliased path
					$between = true;
					
					if(!in_array($curr_dir, $directories))
					{
						$directories[] = $curr_dir;
						// if the setting('alias_enable') is true this will only add the folder
						//    if it is in the list of aliases
						$watched_to_where .= ' Filepath != "' . addslashes($curr_dir) . '" AND';
					}
				}
				// but make an exception for folders between an alias and the watch path
				elseif(setting('alias_enable') && $between && !in_array($curr_dir, $directories))
				{
					$directories[] = $curr_dir;
					
					$watched_to_where .= ' Filepath != "' . addslashes($curr_dir) . '" AND';
				}
			}
		}
	}
	// remove last AND
	$watched_to_where = substr($watched_to_where, 0, strlen($watched_to_where)-3);
	
	$where_str = $watched_to_where . ' AND ' . $watched_where;
	
	// remove items that aren't in where directories
	$GLOBALS['database']->query(array('DELETE' => $handler, 'WHERE' => array($where_str)), true);
	
	if(count($GLOBALS['ignored']) > 0)
	{
		
		$ignored_where = '';
		// clean up items that are in the ignore list
		foreach($GLOBALS['ignored'] as $i => $ignore)
		{
			$tmp_ignore = str_replace('\\', '/', $ignore['Filepath']);
			$ignored_where .= ' LEFT(Filepath, ' . strlen($tmp_ignore) . ') = "' . addslashes($tmp_ignore) . '" OR';
		}
		// remove last OR
		$ignored_where = substr($ignored_where, 0, strlen($ignored_where)-2);
		
		// remove items that are ignored
		$GLOBALS['database']->query(array('DELETE' => $handler, 'WHERE' => array($ignored_where)), true);
	}
	*/
	
	// remove any duplicates
	$files = db_assoc('SELECT MIN(id) as id,Filepath,COUNT(*) as num FROM ' . $handler . ' HAVING num > 1 GROUP BY Filepath');

	// if files is not an array something must have gone wrong
	if(!is_array($files))
	{
		raise_error('There was a problem when trying to remove duplicate files.', E_DEBUG);
	}
	else
	{
		// remove first item from all duplicates
		foreach($files as $i => $file)
		{
			raise_error('Removing Duplicate ' . get_module($handler, 'name') . ': ' . $file['Filepath'], E_DEBUG);
			
			$result = db_query('DELETE FROM ' . $handler . ' WHERE id=' . $file['id']);
		}
	}
	
	raise_error('Cleanup: for ' . get_module($handler, 'name') . ' complete.', E_DEBUG);
	
}

/**
 * @}
 */
