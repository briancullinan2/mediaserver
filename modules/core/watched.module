<?php

function menu_watched()
{
	return array(
		'admin/watched' => array(
			'callback' => 'output_module',
			'template' => 'module',
			'arguments' => array(
				'configure_module' => 'watched',
			),
		)
	);
}

/**
 * Implementation of setup
 */
function setting_watched()
{
	$settings = array();
	
	// add wrapper functions for validating a service entry
	for($i = 0; $i < 128; $i++)
	{
		$GLOBALS['setting_watched_' . $i] = create_function('$settings', 'return setting_watched_index($settings, \'' . $i . '\');');
		$settings[] = 'watched_' . $i;
	}
	
	return $settings;
}

/** 
 * Implementation of handles
 * @ingroup handles
 */
function handles_watched($dir)
{
	$dir = str_replace('\\', '/', $dir);

	if(is_dir(str_replace('/', DIRECTORY_SEPARATOR, $dir)))
	{
		if(is_watched($dir))
		{
			// changed directories or directories that don't exist in the database
			$db_files = db_assoc('SELECT id,Filepath,Filedate FROM files WHERE Filepath=? LIMIT 1', array($dir));
			if(count($db_files) > 0)
			{
				$file = $db_files[0];
			}
		
			// doesn't exist in files database, but is watched should definitely be scanned
			//   definitely scan it if the directory change time is different from the database
			if( !isset($file) || date("Y-m-d h:i:s", filemtime($dir)) != $file['Filedate'] )
			{
				return true;
			}
			else
			{
				// compare the count of files in the database to the file system
				$db_files = db_assoc('SELECT count(*) FROM files WHERE ' . sql_filepath($dir));
				
				// check for file count inconsistency but don't process anything
				$count = 0;
				if (is_readable(str_replace('/', DIRECTORY_SEPARATOR, $dir)) && $dh = opendir(str_replace('/', DIRECTORY_SEPARATOR, $dir)))
				{
					// count files
					while (($file = readdir($dh)) !== false)
					{
						if(handles($dir . $file, 'files'))
						{
							if(is_dir(str_replace('/', DIRECTORY_SEPARATOR, $dir . $file . '/')))
							{
								if(is_watched($dir . $file . '/'))
									$count++;
							}
							else
							{
								$count++;
							}
						}
						
						// return if count is different from database
						if($count > $db_files[0]['count(*)'])
						{
							raise_error('Directory count inconsitency: too few files in database!', E_DEBUG);
							return true;
						}
					}
					closedir($dh);
				}

				// if count if less then number of directories in database
				if($count < $db_files[0]['count(*)'])
				{
					raise_error('Directory count inconsitency: too many files in database!', E_DEBUG);
					return true;
				}
			}
		}
	}
	
	return false;
}

/**
 * Helper function
 */
function setting_watched_index($settings, $index)
{
	if(isset($settings['watched_' . $index]))
	{
		// add prefix
		if($settings['watched_' . $index][0] == '!')
			$prefix = '!';
		else
			$prefix = '^';
		
		// remove leading symbol
		if($settings['watched_' . $index][0] == '!' || $settings['watched_' . $index][0] == '^')
			$settings['watched_' . $index] = substr($settings['watched_' . $index], 1);
		
		// add trailing slash
		if(substr($settings['watched_' . $index], -1) != '/' && substr($settings['watched_' . $index], -1) != '\\')
			$settings['watched_' . $index] .= DIRECTORY_SEPARATOR;
		
		// confirm that it is a directory
		if(is_dir($settings['watched_' . $index]))
			return $prefix . $settings['watched_' . $index];
	}
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_watches($settings)
{
	$watches = array();
	
	for($i = 0; $i < 128; $i++)
	{
		$watch = setting_watched_index($settings, $i);
		if(isset($watch) && substr($watch, 0, 1) == '^')
			$watches[] = get_info_files(substr($watch, 1));
	}
	$watches[] = get_info_files(setting('local_users'));
	
	return $watches;
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_ignores($settings)
{
	$ignores = array();
	
	for($i = 0; $i < 128; $i++)
	{
		$watch = setting_watched_index($settings, $i);
		if(isset($watch) && substr($watch, 0, 1) == '!')
			$ignores[] = get_info_files(substr($watch, 1));
	}
	
	return $ignores;
}

/** 
 * Checks if a directory has changed and should be added to the watch list
 */
function is_watched($dir)
{
	// check if the file is watched from the list of watched and ignored directories
	$is_ignored = false;
	$is_watched = false;
	foreach(setting('watches') as $i => $watch)
	{
		if(substr($dir, 0, strlen($watch['Filepath'])) == $watch['Filepath'])
		{
			$is_watched = true;
		}
		// check if aliasing is used, if not, 
		//   also watch the directories leading up to watched directories, but nothing else
		if(!setting('alias_enable') && substr($watch['Filepath'], 0, strlen($dir)) == $dir &&
			is_dir($dir)
		)
			$is_watched = true;
	}
	foreach(setting('ignores') as $i => $ignore)
	{
		if(substr($dir, 0, strlen($ignore['Filepath'])) == $ignore['Filepath'])
		{
			$is_ignored = true;
		}
	}
	
	// if the path is watched and ignored that means there is an ignore directory inside the watch directory
	//   this is what we want, so always return false in this case
	if($is_ignored) return false;
	
	// even if it isn't ignored we still have to check if it is even watched
	if($is_watched) return true;
	
	return false;
}

function watched_and_files($file)
{
	return is_watched($file) && handles($file, 'files');
}

function scan_dir($dir)
{
	raise_error('Scanning directory: ' . $dir, E_DEBUG);
	
	$local_files = scan_directory($dir, 'watched_and_files');

	$database_files = db_list('SELECT Filepath FROM files WHERE ' . sql_filepath($dir));
	
	// these files exists on disk and in the database
	$in_common = array_intersect($local_files, $database_files);
	
	// get new files
	$new_files = array_diff($local_files, $in_common);
	foreach($new_files as $i => $file)
	{
		add($file);
	}
	
	// get removed files
	$removed_files = array_diff($database_files, $in_common);
	foreach($removed_files as $i => $file)
	{
		// remove file from each handler
		foreach(get_handlers(false, true) as $handler => $config)
		{
			remove($file, $handler);
		}
	}
	
	// add directory passed in
	add($dir);
}

/**
 * Implementation of validate
 * @ingroup validate
 * @return accepts any positive numeric index to remove
 */
function validate_wremove($request)
{
	return generic_validate_numeric_zero($request, 'wremove');
}

/**
 * Implementation of configure
 */
function configure_watched($settings, $request)
{
	$settings['watches'] = setting('watches');
	$settings['ignores'] = setting('ignores');
	
	$options = array();
	
	$watched_options = array();
	foreach($settings['watches'] as $i => $watch)
	{
		$watched_options[] = 'Watched: ' . $watch['Filepath'];
	}
	foreach($settings['ignores'] as $i => $watch)
	{
		$watched_options[] = 'Ignored: ' . $watch['Filepath'];
	}
	
	$options['manage'] = array(
		'name' => 'Manage Watches',
		'type' => 'fieldset',
		'options' => array(
			'wremove' => array(
				'name' => 'Remove Watch',
				'status' => '',
				'type' => 'set',
				'options' => array(
					'wremove[folder]' => array(
						'name' => 'Current Watched Directories',
						'type' => 'multiselect',
						'options' => $watched_options,
						'value' => '',
					),
					array(
						'value' => '<br />',
					),
					'wremove[remove]' => array(
						'type' => 'submit',
						'value' => 'Remove'
					),
				),
				'description' => array(
					'list' => array(
						'Watched directories are used to updating the database and determining what directories users have access too.',
						'Use this form to manage the watched directories.'
					)
				)
			),
			'waddpath' => array(
				'name' => 'Add Watched Directory',
				'status' => '',
				'type' => 'set',
				'options' => array(
					array(
						'name' => 'Select a Directory',
						'type' => 'theme',
						'value' => 'select_block',
					),
					array(
						'value' => '<br />',
					),
					'waddpath[folder]' => array(
						'type' => 'text',
						'value' => $request['dir'],
					),
					array(
						'value' => '<br />',
					),
					'waddpath[add]' => array(
						'type' => 'submit',
						'value' => 'Add',
					),
				),
				'description' => array(
					'list' => array(
						'Add a directory to the watch list.',
						'Using a ! infront of the directory will ignore the directory.'
					),
				),
			),
		),
	);
	
	// make select call for the file browser
	$files = _get_local_files(array(
		'dir' => validate($request, 'dir'),
		'start' => validate($request, 'start'),
		'limit' => 32000,
		'dirs_only' => true,
	), $total_count);
	
	register_output_vars('files', $files);
	
	return $options;
}

