<?php

function setup_movies()
{
	stream_wrapper_register('moviesthumb', 'moviesthumb');
}

function handles_movies($file)
{
	$is_video = handles($file, 'video');
	
	// do all movies
	if($is_video)
		return true;
	
	// add a trailing slash to directories so that is does not match the movie folder as a movie
	if(is_dir($file) && substr($file, -1) != '/')
		$file .= '/';
		
	// do not handle internal files, only physical files
	if(!is_file($file) && !is_dir($file))
		return false;
	
	// do movies in the folders from the download_movies module
	if($movie_folders = setting('movie_folders'))
	{
		$is_movie = false;
		foreach($movie_folders as $i => $folder)
		{
			if(substr($file, 0, strlen($folder)) == $folder && $file != $folder)
			{
				$is_movie = true;
				break;
			}
		}
		if($is_movie)
			return true;
	}
	
	// if current directory is a movie and the file is a VIDEO_TS or .ISO
	if((ext($file) == 'iso' || strtoupper(basename($file)) == 'VIDEO_TS') && 
		handles(dirname($file), 'movies')
	)
		return true;
	
	// check to see if current directory of the file is titled movie
	if(strtolower(basename(dirname($file))) == 'movies')
		return true;
	
	// not a movie
	return false;
}

function setting_movies()
{
	$settings = array('tmdb_api');
	
	// movie folders
	for($i = 0; $i < 50; $i++)
	{
		$GLOBALS['setting_movie_folder_' . $i] = create_function('$settings', 'return setting_movie_folder($settings, \'' . $i . '\');');
		$settings[] = 'movie_folder_' . $i;
	}
	
	return $settings;
}

function dependency_tmdb_api($settings)
{
	return (setting('tmdb_api') != '');
}

function setting_tmdb_api($settings)
{
	return generic_validate_alphanumeric($settings, 'tmdb_api');
}

function validate_add_movie_folder($request)
{
	if(!isset($request['add_movie_folder']['add']))
		return;
		
	return $request['add_movie_folder']['folder'];
}

function validate_remove_movie_folder($request)
{
	return generic_validate_numeric($request, 'remove');
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_movie_folder($settings, $index)
{
	if(isset($settings['movie_folder_' . $index]))
	{
		$settings['movie_folder_' . $index] = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $settings['movie_folder_' . $index]);
		if(substr($settings['movie_folder_' . $index], -1) != DIRECTORY_SEPARATOR)
			$settings['movie_folder_' . $index] .= DIRECTORY_SEPARATOR;
		if(is_dir($settings['movie_folder_' . $index]))
			return str_replace('\\', '/', $settings['movie_folder_' . $index]);
	}
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_movie_folders($settings)
{
	if(!isset($settings['movie_folders']))
		$settings['movie_folders'] = array();

	for($i = 0; $i < 50; $i++)
	{
		$folder = setting_movie_folder($settings, $i);
		if(isset($folder))
			$settings['movie_folders'][$i] = $folder;
	}
	
	if(setting_installed() && setting('database_enable'))
	{
		// add folders in the watch list that include the word movie
		foreach(setting('watches') as $i => $watch)
		{
			if(preg_match('/movie/i', $watch['Filepath']) != 0)
			{
				$index = count($settings['movie_folders']);
				$folder = setting_movie_folder(array('movie_folder_' . $index => $watch['Filepath']), $index);
			}
		}
	}
	
	return array_values(array_unique($settings['movie_folders']));
}

function configure_movies($request)
{
	$settings['movie_folders'] = setting('movie_folders');
	$settings['tmdb_api'] = setting('tmdb_api');
	
	$folder_count = count($settings['movie_folders']);
	
	// load services from session
	if($session_movies = session('movie_download'))
		$settings['movie_folders'] = $session_movies['folders'];
	
	if(dependency('tmdb_api'))
	{
		$options['setting_tmdb_api'] = array(
			'name' => 'API Key',
			'status' => '',
			'description' => array(
				'list' => array(
					'You have specified a TMDB API key.',
					'link' => array(
						'url' => 'http://api.themoviedb.org/2.1',
						'text' => 'TMDB API Documentation',
					)
				),
			),
			'type' => 'text',
			'value' => $settings['tmdb_api'],
		);
	}
	else
	{
		$options['setting_tmdb_api'] = array(
			'name' => 'API Key',
			'status' => 'fail',
			'description' => array(
				'list' => array(
					'In order to use this module you must specify an API key to access TMDB.',
					'link' => array(
						'url' => 'http://api.themoviedb.org/2.1',
						'text' => 'TMDB API Documentation',
					)
				),
			),
			'type' => 'text',
			'value' => $settings['tmdb_api'],
		);
	}
	
	// use indices instead
	$options['movie_folders'] = array(
		'name' => 'Movie Folders',
		'status' => '',
		'description' => array(
			'list' => array(
				'This is a list for folders that contain movies.  Movies can be folder names, or file names.',
				'It is recommended that only watched folders be used.'
			),
		),
		'type' => 'set',
		'options' => array(
			'remove_movie_folder[folders]' => array(
				'type' => 'multiselect',
				'options' => $settings['movie_folders'],
				'value' => array(),
				'force_numeric' => true,
			),
			'remove_movie_folder[remove]' => array(
				'type' => 'submit',
				'value' => 'Remove',
			),
			'add_movie_folder[folder]' => array(
				'type' => 'text',
				'value' => '',
				'name' => 'Add Folder',
			),
			'add_movie_folder[add]' => array(
				'type' => 'submit',
				'value' => 'Add',
			),
		),
	);
	
	// add movies for saving
	foreach($settings['movie_folders'] as $i => $folder)
	{
		$options['movie_folders']['options']['setting_movie_folder_' . $i] = array(
			'type' => 'hidden',
			'value' => $folder,
		);
	}
	
	// add unsettings
	for($i = 0; $i < $folder_count - count($settings['movie_folders']); $i++)
	{
		$options['movie_folders']['options']['setting_movie_folder_' . (count($settings['movie_folders']) + $i)] = array(
			'type' => 'hidden',
			'value' => '',
		);
	}
	
	return array('movies' => array(
		'name' => 'Movie Meta-Data Settings',
		'type' => 'fieldset',
		'options' => $options
	));
}

/**
 * Implementation of session
 * @ingroup session
 */
function session_movies($request)
{
	// might be configuring the module
	if(!($save = session('movies')) || isset($request['reset_configuration']))
		$save = array('folders' => setting('movie_folders'));

	// add server
	if(isset($request['add_movie_folder']))
	{
		$new_folder = setting_movie_folder(array('movie_folder_0' => $request['add_movie_folder']), 0);
		if(isset($new_folder))
			$save['folders'][] = $new_folder;
	}

	// remove server
	if(isset($request['remove_movie_folder']))
	{
		unset($save['folders'][$request['remove_movie_folder']]);
		$save['folders'] = array_values($save['folders']);
	}
	
	// cleanup
	$save['folders'] = array_unique($save['folders']);
	
	return $save;
}


function get_info_movies($file)
{
	$fileinfo = array();
	$fileinfo['Filepath'] = str_replace('\\', '/', $file);
	
	// set up tokens
	if((ext($file) == 'iso' || strtoupper(basename($file)) == 'VIDEO_TS') && 
		handles(dirname($file), 'movies')
	)
		$tmp_tokens = tokenize(basename(dirname($file)));
	else
		$tmp_tokens = tokenize(basename($file));

	// set up search
	$search_text = implode(' ', $tmp_tokens['All']);
	$search = 'http://api.themoviedb.org/2.1/Movie.search/en/xml/' . setting('tmdb_api') . '/' . urlencode($search_text);
	$search_results = fetch($search, array(), array('Accept-Encoding: gzip'));
	
	// if no xml is defined then there was a problem
	if(!isset($search_results['xml']))
		return false;
	
	// get names and ids of results
	$names = get_xml_list($search_results['xml']->xpath('//movie/name'));
	$ids = get_xml_list($search_results['xml']->xpath('//movie/id'));
	
	if(empty($names))
		return $fileinfo;
	
	list($movie, $key) = get_closest($search_text, $names);
	
	$fileinfo['MovieID'] = $ids[$key];
	
	// check database for movie info
	if(setting('database_enable'))
	{
		$files = db_assoc('SELECT * FROM movies WHERE MovieID=?', array($fileinfo['MovieID']));
		
		if(count($files) > 0)
		{
			$fileinfo += $files[0];
			unset($fileinfo['id']);
			return $fileinfo;
		}
	}

	// get movie info for closest match
	$query = 'http://api.themoviedb.org/2.1/Movie.getInfo/en/xml/' . setting('tmdb_api') . '/' . $fileinfo['MovieID'];
	$movie = fetch($query, array(), array('Accept-Encoding: gzip'));
	
	if(!isset($movie['xml']))
		return false;
	
	$fileinfo['IMDB'] = get_xml_result($movie['xml']->xpath('//movie/imdb_id'));
	$fileinfo['Rating'] = get_xml_result($movie['xml']->xpath('//movie/rating'));
	$fileinfo['Overview'] = get_xml_result($movie['xml']->xpath('//movie/overview'));
	$fileinfo['ReleaseDate'] = date('Y-m-d', strtotime(get_xml_result($movie['xml']->xpath('//movie/released'))));
	$fileinfo['Runtime'] = get_xml_result($movie['xml']->xpath('//movie/runtime'));
	$fileinfo['MovieXml'] = $movie['content'];
	
	// get the image
	$images = $movie['xml']->xpath('//image[@size="original"]');
	if(isset($images[0]))
	{
		$image_attr = $images[0]->attributes();
		$image = fetch($image_attr['url'], array(), array('Accept-Encoding: gzip'));
		$fileinfo['Image'] = 'data:' . $image['headers']['content-type'] . ';base64,' . base64_encode($image['content']);
	}
	
	return $fileinfo;
}

/**
 * Implementation of handler_output
 * @ingroup handler_output
 */
function output_movies($file)
{
	$file = str_replace('\\', '/', $file);
	
	if(setting('alias_enable'))
		$file = alias_replace($file);
	
	$files = db_assoc('SELECT * FROM movies WHERE Filepath=? LIMIT 1', array($file));
	if(count($files) > 0)
	{				
		header('Content-Type: ' . substr($files[0]['Image'], 5, strpos($files[0]['Image'], ';')));
		return fopen('moviesthumb://' . $file, 'rb');
	}

	return false;
}


// music handler
class moviesthumb
{	
	// this is for stream stuff when controlling output of the file
       
    protected $internal_fp = NULL;
    protected $internal_length = NULL;
    protected $internal_pos = NULL;
	
    function stream_open($path, $mode, $options, &$opened_path)
    {
		if(substr($path, 0, strlen('moviesthumb://')) == 'moviesthumb://')
			$path = substr($path, strlen('moviesthumb://'));
			
		$files = db_assoc('SELECT * FROM movies WHERE Filepath=? LIMIT 1', array($path));

		if(count($files) > 0)
		{
			$this->internal_text = base64_decode(substr($files[0]['Image'], strpos($files[0]['Image'], ';base64,') + 8));
			$this->internal_length = strlen($this->internal_text);
			$this->internal_pos = 0;
			return true;
		}
		
		return false;
    }
    function stream_read($count){
		if($this->internal_pos + $count > $this->internal_length)
			$count = $this->internal_length - $this->internal_pos;
		$buffer = substr($this->internal_text, $this->internal_pos, $count);
		$this->internal_pos += $count;
        return $buffer;
    }
    function stream_eof(){
        return $this->internal_pos >= $this->internal_length;
    }
    function stream_tell(){
        return $this->internal_pos;
    }
    function stream_seek($position){
		if($position > $this->internal_length)
		{
			$position = $this->internal_length;
		}
		$this->internal_pos = $position;
        return 0;
    }
}

