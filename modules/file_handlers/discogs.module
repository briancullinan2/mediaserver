<?php

function setup_discogs()
{
	if(!in_array('discogsthumb', stream_get_wrappers()))
		stream_wrapper_register('discogsthumb', 'discogsthumb');
}

/** 
 * Implementation of handles
 * @ingroup handles
 */
function handles_discogs($file)
{
	return handles($file, 'audio');
}

function configure_discogs($settings)
{
	$settings['discogs_api'] = setting('discogs_api');
	
	if(dependency('discogs_api'))
	{
		$options['setting_discogs_api'] = array(
			'name' => 'API Key',
			'status' => '',
			'description' => array(
				'list' => array(
					'You have specified a DiscOgs API key.',
					'Note: This key is limited to 5,000 request per 24 hours.',
					'link' => array(
						'url' => 'http://www.discogs.com/help/api',
						'text' => 'DiscOgs API Documentation',
					)
				),
			),
			'type' => 'text',
			'value' => $settings['discogs_api'],
		);
	}
	else
	{
		$options['setting_discogs_api'] = array(
			'name' => 'API Key',
			'status' => 'fail',
			'description' => array(
				'list' => array(
					'In order to use this module you must specify an API key to access DiscOgs.',
					'link' => array(
						'url' => 'http://www.discogs.com/help/api',
						'text' => 'DiscOgs API Documentation',
					)
				),
			),
			'type' => 'text',
			'value' => $settings['discogs_api'],
		);
	}
	
	return array('discogs' => array(
		'name' => 'API Key',
		'type' => 'fieldset',
		'options' => $options
	));
}

function dependency_discogs_api($settings)
{
	return (setting('discogs_api') != '');
}

function setting_discogs_api($settings)
{
	return generic_validate_alphanumeric($settings, 'discogs_api');
}


function get_info_discogs($file)
{
	$audioinfo = get_info_audio($file);
	
	// match as much information as possible
	if(!empty($audioinfo['Artist']) && !empty($audioinfo['Album']))
	{
		$fileinfo = array();
		$fileinfo['Filepath'] = str_replace('\\', '/', $file);
		
		$search_text = $audioinfo['Artist'] . ' - ' . $audioinfo['Album'];
		$search = 'http://www.discogs.com/search?type=all&q=' . urlencode($search_text) . '&f=xml&api_key=' . setting('discogs_api');
		$search_results = fetch($search, array(), array('Accept-Encoding: gzip'));
			
		// check for errors
		if(!isset($search_results['xml']) || preg_match('/<error>/i', $search_results['content']) > 0)
			return false;
		
		// parse content
		$results = $search_results['xml']->xpath('//result[@type="artist" or @type="release"]');
		if(count($results) == 0)
			return false;
		
		$titles = get_xml_list($search_results['xml']->xpath('//result[@type="artist" or @type="release"]/title'));
		$uris = get_xml_list($search_results['xml']->xpath('//result[@type="artist" or @type="release"]/uri'));
		
		// find the closest match
		list($album_artist, $key) = get_closest($search_text, $titles);

		$result_attr = $results[$key]->attributes();
		$fileinfo['Type'] = ucfirst($result_attr['type']);

		// try to find artist album first
		if($fileinfo['Type'] == 'Artist')
		{
			// get artist info then album
			$query = $uris[$key] . '?f=xml&api_key=' . setting('discogs_api');
			$artist = fetch($query, array(), array('Accept-Encoding: gzip'));
			
			if(!isset($artist['xml']))
				return false;
		}
		elseif($fileinfo['Type'] == 'Release')
		{
			$query = $uris[$key] . '?f=xml&api_key=' . setting('discogs_api');
			$album = fetch($query, array(), array('Accept-Encoding: gzip'));
			
			if(!isset($album['xml']))
				return false;
			
			$release = $album['xml']->xpath('//release');
			$release_attr = $release[0]->attributes();
			$fileinfo['ReleaseNum'] = $release_attr['id'];
		}
		
		if(!isset($album))
		{
			// try to match up release
			$albums = get_xml_list($artist['xml']->xpath('//release/title'));
			$releases = get_xml_list($artist['xml']->xpath('//release'));
			
			// return if no search results where found
			if(count($release) == 0)
				return $fileinfo;
			
			// find the closest match
			list($album, $key) = get_closest($audioinfo['Album'], $albums);
			
			$release_attr = $releases[$key]->attributes();
			$fileinfo['ReleaseNum'] = $release_attr['id'];
		
			// get album info
			$query = 'http://www.discogs.com/release/' . $fileinfo['ReleaseNum'] . '?f=xml&api_key=' . setting('discogs_api');
			$album = fetch($query, array(), array('Accept-Encoding: gzip'));
			$fileinfo['Type'] = 'Release';
		}
		
		// check database for artist and track info
		if(setting('database_enable'))
		{
			$files = db_assoc('SELECT * FROM discogs WHERE ReleaseNum=?', array($fileinfo['ReleaseNum']));
			
			if(count($files) > 0)
			{
				$artist['content'] = $files[0]['ArtistXml'];
				//$fileinfo['Image'] = $files[0]['Image'];
			}
		}
	
		if(!isset($artist))
		{
			// try to match up release
			$artists = get_xml_list($album['xml']->xpath('//artist/name'));
		
			// find the closest match
			list($artist) = get_closest($audioinfo['Artist'], $artists);
			
			// get album info
			$query = 'http://www.discogs.com/artist/' . urlencode($artist) . '?f=xml&api_key=' . setting('discogs_api');
			$artist = fetch($query, array(), array('Accept-Encoding: gzip'));
		}

		// match up track
		if(!empty($audioinfo['Title']))
		{
			// get position
			$tracks = get_xml_list($album['xml']->xpath('//track/title'));
			$positions = get_xml_list($album['xml']->xpath('//track/position'));
			
			// find closest match
			list($track, $key) = get_closest($audioinfo['Title'], $tracks);
			
			$fileinfo['Position'] = $positions[$key];
			$fileinfo['Type'] = 'Track';
		}
		
		// get image
		/*
		$images = $album['xml']->xpath('//images/image');
		if(!isset($fileinfo['Image']) && isset($images[0]))
		{
			$image_attr = $images[0]->attributes();
			$image = fetch($image_attr['uri'], array(), array('Accept-Encoding: gzip'));
			$fileinfo['Image'] = 'data:' . $image['headers']['content-type'] . ';base64,' . base64_encode($image['content']);
		}
		*/
		
		$fileinfo['ArtistXml'] = $artist['content'];
		$fileinfo['ReleaseXml'] = $album['content'];
	
		return $fileinfo;
	}
	
	return false;
}

/**
 * Implementation of handler_output
 * @ingroup handler_output
 */
function output_discogs($file)
{
	$files = db_assoc('SELECT * FROM discogs WHERE Filepath=? LIMIT 1', array($file));
	if(count($files) > 0 && dependency('simplexml_installed'))
	{
		try {
			$album['xml'] = new SimpleXMLElement($files[0]['ReleaseXml']);
		} catch (Exception $e) {
			exception_wrapper($e);
		}
		if(isset($album['xml']))
		{
			$images = $album['xml']->xpath('//images/image');
			$image_attr = $images[0]->attributes();
			//header('Content-Type: ' . substr($files[0]['Image'], 5, strpos($files[0]['Image'], ';')));
			return fopen($image_attr['uri'], 'rb');
		}
	}

	return false;
}


// music handler
class discogsthumb
{	
	// this is for stream stuff when controlling output of the file
       
    protected $internal_fp = NULL;
    protected $internal_length = NULL;
    protected $internal_pos = NULL;
	
    function stream_open($path, $mode, $options, &$opened_path)
    {
		if(substr($path, 0, strlen('discogsthumb://')) == 'discogsthumb://')
			$path = substr($path, strlen('discogsthumb://'));
			
		$files = db_assoc('SELECT * FROM discogs WHERE Filepath=? LIMIT 1', array($path));

		if(count($files) > 0)
		{
			$this->internal_text = base64_decode(substr($files[0]['Image'], strpos($files[0]['Image'], ';base64,') + 8));
			$this->internal_length = strlen($this->internal_text);
			$this->internal_pos = 0;
			return true;
		}
		
		return false;
    }
    function stream_read($count){
		if($this->internal_pos + $count > $this->internal_length)
			$count = $this->internal_length - $this->internal_pos;
		$buffer = substr($this->internal_text, $this->internal_pos, $count);
		$this->internal_pos += $count;
        return $buffer;
    }
    function stream_eof(){
        return $this->internal_pos >= $this->internal_length;
    }
    function stream_tell(){
        return $this->internal_pos;
    }
    function stream_seek($position){
		if($position > $this->internal_length)
		{
			$position = $this->internal_length;
		}
		$this->internal_pos = $position;
        return 0;
    }
}

