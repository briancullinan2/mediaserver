<?php

function menu_download_services()
{
	return array(
		'admin/tools/download/login/%login_index' => array(
			'callback' => 'output_download_services_login',
		),
		'admin/tools/download/search/%service_index' => array(
			'callback' => 'output_download_services_manual',
		),
	);
}


function get_download_services()
{
	return get_modules_implements('setting_download_services', true);
}

/**
 * Set up the list settings
 * @ingroup setup
 */
function setting_download_services()
{
	$settings = array();
	
	// add wrapper functions for validating a service entry
	for($i = 0; $i < 10; $i++)
	{
		$GLOBALS['setting_download_service_' . $i] = create_function('$settings', 'return setting_download_service($settings, \'' . $i . '\');');
		$settings[] = 'download_service_' . $i;
	}
	
	return $settings;
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_savepath($settings)
{
	if($settings['savepath'] = generic_validate_dir($settings, 'savepath') && is_writable($settings['savepath']))
		return $settings['savepath'];
	else
		return setting('tmp_dir');
}


/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_download_service($settings, $index)
{
	if(!isset($settings[$index]) || !is_array($settings[$index]))
		return;
		
	// copy values
	$service = array(
		'name' => isset($settings[$index]['name'])?$settings[$index]['name']:'',
		'match_title' => isset($settings[$index]['match_title'])?$settings[$index]['match_title']:'',
		'match' => isset($settings[$index]['match'])?$settings[$index]['match']:'',
		'search' => isset($settings[$index]['search'])?$settings[$index]['search']:'',
		'image' => isset($settings[$index]['image'])?$settings[$index]['image']:'',
		'login' => isset($settings[$index]['login'])?$settings[$index]['login']:'',
		'username' => isset($settings[$index]['username'])?$settings[$index]['username']:'',
		'password' => isset($settings[$index]['password'])?$settings[$index]['password']:'',
		'userfield' => isset($settings[$index]['userfield'])?$settings[$index]['userfield']:'',
		'passfield' => isset($settings[$index]['passfield'])?$settings[$index]['passfield']:'',
		'loginfail' => isset($settings[$index]['loginfail'])?$settings[$index]['loginfail']:'',
		'exclude' => isset($settings[$index]['exclude'])?$settings[$index]['exclude']:'',
		'include' => isset($settings[$index]['include'])?$settings[$index]['include']:'',
		'savepath' => isset($settings[$index]['savepath'])?$settings[$index]['savepath']:'',
	);
	
	// validate name
	if(!($service['name'] = generic_validate_all_safe(array('service_name' => $service['name']), 'service_name')))
		return;

	// make sure there is valid regular expression
	if(!($service['match'] = generic_validate_regexp(array('service_match' => $service['match']), 'service_match')))
		return;
	if(!($service['match_title'] = generic_validate_regexp(array('service_match_title' => $service['match_title']), 'service_match_title')))
		
	$service['image'] = generic_validate_all_safe(array('service_image' => $service['image']), 'service_image');
	
	// validate search
	$service['search'] = generic_validate_url(array('service_search' => $service['search']), 'service_search');
		
	$service['login'] = generic_validate_url(array('service_login' => $service['login']), 'service_login');
	
	// validate username and password
	$service['username'] = generic_validate_all_safe(array('service_username' => $service['username']), 'service_username');
	$service['password'] = generic_validate_all_safe(array('service_password' => $service['password']), 'service_password');
	
	// validate extra fields
	$service['userfield'] = generic_validate_all_safe(array('service_userfield' => $service['userfield']), 'service_userfield');
	$service['passfield'] = generic_validate_all_safe(array('service_passfield' => $service['passfield']), 'service_passfield');
	$service['loginfail'] = generic_validate_regexp(array('service_loginfail' => $service['loginfail']), 'service_loginfail');
	$service['exclude'] = generic_validate_all_safe(array('service_exclude' => $service['exclude']), 'service_exclude');
	$service['include'] = generic_validate_all_safe(array('service_include' => $service['include']), 'service_include');
	
	// validate save path
	if(!($service['savepath'] = generic_validate_dir(array('service_savepath' => $service['savepath']), 'service_savepath')))
		$service['savepath'] = setting('savepath');
	
	return $service;
}

function all_services_module($module, $type = NULL)
{
	$services = setting('download_services_' . $module);
	
	$settings['all_services_' . $module] = array();
	foreach($services as $j => $setting)
	{
		$service = setting($setting, $type);
		if(isset($service))
			$settings['all_services_' . $module][] = $service;
	}
	return $settings['all_services_' . $module];
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_all_download_services($settings, $type = NULL)
{
	$services = array();

	// get predefined services
	foreach(get_download_services() as $i => $module)
	{
		$services = array_merge(all_services_module($module, $type), $services);
	}
	
	// make sure all servers with numeric indexes are on the list
	for($i = 0; $i < 10; $i++)
	{
		$service = setting('download_service', $i);
		if(isset($service))
			$services[] = $service;
	}

	return $services;
}

function configure_services($services)
{
	$options = array();
	
	if(!is_array($services))
		return $options;
	
	foreach($services as $i => $config)
	{
		$service = array();
		
		if($config['image'] == '')
		{
			if($address = generic_validate_hostname(array('address' => $config['search']), 'address'))
				$result = fetch($address . '/favicon.ico');
			elseif($address = generic_validate_hostname(array('address' => $config['login']), 'address'))
				$result = fetch($address . '/favicon.ico');
				
			if(isset($result) && $result['status'] == 200)
			{
				$config['image'] = 'data:image/x-icon;base64,' . base64_encode($result['content']);
			}
		}
		
		$service['setting_download_services_' . $i . '[image]'] = array(
			'type' => 'hidden',
			'value' => $config['image'],
		);
		if($config['login'] != '' || $config['username'] != '')
		{
			$service['setting_download_services_' . $i . '[username]'] = array(
				'type' => 'text',
				'value' => $config['username'],
				'name' => 'Username',
			);
			$service['setting_download_services_' . $i . '[password]'] = array(
				'type' => 'text',
				'value' => $config['password'],
				'name' => 'Password',
			);
		}
		$service['setting_download_services_image_' . $i] = array(
			'image' => $config['image'],
			'name' => 'Image',
		);
		
		$options['download_service_' . $i] = array(
			'name' => $config['name'],
			'status' => (isset($config['login']) && $config['username'] == '')?'warn':'',
			'type' => 'set',
			'options' => $service,
			'description' => array(
				'list' => array(
					'Configure the username and password for ' . $config['name'] . '.'
				)
			)
		);
	}
	
	return $options;
}

/**
 * Implementation of configure
 * @ingroup configure
 */
function configure_download_services($settings)
{
	$settings['all_download_services'] = setting('all_download_services');
	
	$options = array();
	
	$service_options = array();
	foreach($settings['all_download_services'] as $i => $config)
	{
		$service_options[$i] = $config['name'];
	}
	
	if(count(get_download_services()) == 0)
	{
		$download['services'] = array(
			'name' => 'Download Services',
			'status' => 'warn',
			'description' => array(
				'list' => array(
					'This module takes advantage of torrent and news group services.',
					'In order to use this module, the service modules must also be installed.'
				),
			),
			'text' => 'No download service modules installed!',
		);
	}

	$options['manage_services'] = array(
		'name' => 'Manage Download Services',
		'status' => '',
		'description' => array(
			'list' => array(
				'Select an NZB service to search and download from.',
				'Select multiple services to search if there are no NZBs found.',
			),
		),
		'type' => 'set',
		'options' => array(
			'setting_nzbservices' => array(
				'type' => 'multiselect',
				'options' => $service_options,
				'value' => $settings['all_download_services'],
			),
		),
	);

	$options = array_merge(configure_services($settings['all_download_services']), $options);
	
	return array('download_services' => array(
		'name' => 'Download Services',
		'type' => 'fieldset',
		'options' => $options,
	));
}


/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_service_search($request)
{
	if(isset($request['service_search']) && is_string($request['service_search']))
		return generic_validate_all_safe($request, 'service_search');
	
	if(!isset($request['service_search']['search']))
		return;
		
	if(isset($request['service_search']['text']))
		return $request['service_search']['text'];
}

function validate_service_index($request)
{
	return generic_validate_numeric_zero($request, 'service_index');
}

function validate_login_index($request)
{
	return generic_validate_numeric_zero($request, 'login_index');
}

/**
 * Helper function
 * Provides fetch functions for logging in to the configured torrent services
 * More importantly, stores cookies in $_SESSION['download_services_0']
 * @return an array of status codes reported by the fetch function for each configured service
 */
function download_services_login($service)
{
	$services = setting('all_download_services');

	$config = $services[$service];
	
	if(($session_service = session('download_services_' . $service)) && $session_service['logged_in'] == true)
		return true;
	
	$result = fetch($config['login']);
	
	// save session info
	session('download_services_' . $service, array('logged_in' => false) + $result['cookies']);
	
	list($login, $form, $form_html) = get_login_form($result['content'], isset($config['userfield'])?$config['userfield']:'username');
	
	// set up exclude for removal
	if(isset($config['exclude']))
		$exclude = explode(',', $config['exclude']);
	else
		$exclude = array();
	
	// add included fields
	if(isset($config['include']))
	{
		$include = explode(',', $config['include']);
		foreach($include as $j => $add)
		{
			$delim = substr($add, 0, 1);
			if(preg_match(
				// match first delimiter
				'/^\\' . $delim . 
				// match first expression
				'([^\\' . $delim . ']+)\\' . $delim . 
				// match options at end
				'([imsxeADSUXJu]*)' . 
				// match optional replacement string
				'(\\' . $delim . 
				// match replacement expression
				'(.*?)' . 
				// match ending delimiter
				'\\' . $delim . ')?$/', $add, $patterns) > 0 && 
				preg_match($delim . $patterns[1] . $delim . $patterns[2], $form_html, $matches) !== false)
			{
				$form['field_' . $j] = array(
					'type' => 'info',
					'literal' => isset($patterns[4])?preg_replace($delim . $patterns[1] . $delim . $patterns[2], $patterns[4], $matches[0]):$matches[0],
				);
			}
			elseif(strpos($add, '=') !== false)
			{
				list($name, $value) = explode('=', $add, 2);
				$form[$name] = array(
					'type' => 'text',
					'name' => $name,
					'value' => $value,
				);
			}
		}
	}

	// construct post
	$post = array();
		
	// loop through each form field and construct post
	foreach($form as $name => &$field)
	{
		if($name == 'username' || $name == $config['userfield'])
			$field['value'] = $config['username'];
		if($name == 'password' || $name == $config['passfield'])
			$field['value'] = $config['password'];
		
		if(in_array($name, $exclude))
		{
			unset($form[$name]);
			continue;
		}
		
		if(isset($field['value']))
			$post[$name] = $field['value'];
	}
	
	// check if there are any empty fields
	if(array_search('', $post) !== false)
		return $form;
	
	// submit
	$session_service = session('download_services_' . $service);
	
	// set second login location
	if($login != '')
		$login = get_full_url($config['login'], $login);

	$result = fetch($login, $post, array('referer' => $config['login']), isset($session_service)?$session_service:array());

	// try to check if the login was successful
	if(isset($config['loginfail']))
	{
		if(preg_match($config['loginfail'], $result['content']) != 0)
			$status = false;
		else
			$status = $result['status'];
	}
	elseif(preg_match('/access denied|error/i', $result['content']) != 0)
	{
		$status = false;
	}
	else
		$status = $result['status'];

	// save session info
	if($status !== false)
		session('download_services_' . $service, array('logged_in' => true) + $result['cookies']);
	
	return $status;
}

/**
 * Helper function for fetching all movies from services
 */
function fetch_service_results($search, $index)
{
	$downloads = array();
	
	// get the config
	$services = setting('all_download_services');
	
	if($services[$index]['search'] != '')
	{
		// run query, using television search strings
		$result = fetch(sprintf($services[$index]['search'], urlencode($search)), array(), array(), session('download_services_' . $index));

		// match nzbs
		$count = preg_match_all($services[$index]['match'], $result['content'], $matches);
		if(isset($services[$index]['match_title']))
			$count_titles = preg_match_all($services[$index]['match_title'], $result['content'], $titles);
		if($count > 0)
		{
			foreach($matches[1] as $i => $link)
			{
				$link = get_full_url($services[$index]['search'], $link);
				// return list of downloads
				$downloads[$i] = array('link' => array('url' => $link, 'text' => (isset($titles[1][$i])?$titles[1][$i]:$search)));
			}
		}
	}
	
	return $downloads;
}

function session_download_services($request)
{
	return $request['service_search'];
}

function output_download_services_manual($request, $override_link = 'admin/tools/download/search/')
{
	$services = setting('all_download_services');
	
	$request['service_index'] = validate($request, 'service_index');
	$request['service_search'] = session('download_services');
	
	if(isset($request['service_search']))
	{
		// search for movie on each services
		$results = fetch_service_results($request['service_search'], $request['service_index'], false);
		
		if(count($results) > 0)
		{
			$infos['service_search_' . $request['service_index']] = array(
				'name' => 'Searched on ' . $services[$request['service_index']]['name'],
				'status' => '',
				'description' => array(
					'list' => array(
						'This terms have been searched for on ' . $services[$request['service_index']]['name'] . ', and results were found.',
					),
				),
				'text' => array(
					$services[$request['service_index']]['name'],
					'list' => $results
				)
			);
		}
		
		// do next service
		if(isset($request['service_index']) && $request['service_index']+1 < count($services))
		{
			$infos['service_search_' . ($request['service_index']+1)] = array(
				'name' => 'Manual Search on ' . $services[($request['service_index']+1)]['name'],
				'status' => '',
				'description' => array(
					'list' => array(
						'Searching for movies.',
					),
				),
				'text' => array(
					'loading' => 'Loading...'
				),
				'type' => 'theme',
				'value' => 'singular',
				'href' => url($override_link . ($request['service_index']+1) . '?service_search=' . urlencode($request['service_search']), true),
			);
		}
	}
	// display manual search box
	else
	{
		$infos['service_search'] = array(
			'name' => 'Manual Search',
			'status' => '',
			'description' => array(
				'list' => array(
					'Enter terms to search on all of the download services.',
				),
			),
			'type' => 'set',
			'options' => array(
				'service_search[text]' => array(
					'type' => 'text',
					'value' => (isset($request['service_search'])?$request['service_search']:''),
					'name' => 'Manual Search'
				),
				'service_search[search]' => array(
					'type' => 'submit',
					'value' => 'Search',
				),
			),
		);
	}
		
	theme('form_fieldrows', $infos);
}


/**
 * Helper function, creates a return for the singular object
 */
function output_download_services_login($request, $override_link = 'admin/tools/download/login/')
{
	$services = setting('all_download_services');
	$request['login_index'] = validate($request, 'login_index');
	
	$infos = array();
	
	// log in to services here
	if($request['login_index'] < count($services))
	{
		$status = download_services_login($request['login_index']);
		$config = $services[$request['login_index']];
		
		if($status == false)
		{
			$infos['download_service_' . $request['login_index']] = array(
				'name' => $config['name'] . ' Login Failed',
				'status' => 'fail',
				'description' => array(
					'list' => array(
						'Login to ' . $config['login'] . ' for ' . $config['name'] . ' failed!',
					),
				),
				'text' => 'Login Failed!'
			);
		}
		elseif(is_array($status))
		{
			$status[] = array(
				'type' => 'submit',
				'value' => 'Login',
			);
			$infos['download_service_' . $request['login_index']] = array(
				'name' => $config['name'] . ' Login',
				'status' => 'warn',
				'description' => array(
					'list' => array(
						'Login information for ' . $config['name'] . ' required!',
					),
				),
				'type' => 'set',
				'options' => $status,
			);
		}
		elseif($status === true)
		{
			$infos['download_service_' . $request['login_index']] = array(
				'name' => $config['name'] . ' Login',
				'status' => '',
				'description' => array(
					'list' => array(
						'Login to ' . $config['login'] . ' for ' . $config['name'] . ' successful!',
					),
				),
				'text' => 'Already logged in!'
			);
		}
		else
		{
			$infos['download_service_' . $request['login_index']] = array(
				'name' => $config['name'] . ' Login',
				'status' => '',
				'description' => array(
					'list' => array(
						'Login to ' . $config['login'] . ' for ' . $config['name'] . ' successful!',
					),
				),
				'text' => 'Login Succeeded!'
			);
		}
	}
	
	if($request['login_index']+1 < count($services))
	{
		$config = $services[($request['login_index']+1)];
		
		$infos['download_service_' . ($request['login_index']+1)] = array(
			'name' => $config['name'] . ' Login',
			'status' => '',
			'description' => array(
				'list' => array(
					'Logging in to ' . $config['name'] . '.',
				),
			),
			'text' => array(
				'loading' => 'Loading...'
			),
			'type' => 'theme',
			'value' => 'singular',
			'href' => url($override_link . ($request['login_index']+1), true),
		);
	}

	theme('form_fieldrows', $infos);
}
 
