<?php

function menu_tv_download()
{
	return array(
		'admin/tools/television/downloader' => array(
			'callback' => 'output_tv_download',
		),
		'admin/tools/television/downloader/%info_singular_step_television' => array(
			'callback' => 'output_tv_download_singular'
		)
	);
}

/**
 * Set up the list of settings
 * @ingroup setup
 */
function setup_tv_download()
{
	require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'tvdl.singular.inc';
	require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'myepisodes.inc';
}

function setting_tv_download()
{
	$settings = array('myepisodes');
	
	// add wrapper functions for validating a service entry
	for($i = 0; $i < 10; $i++)
	{
		$GLOBALS['setting_nzb_television_search_' . $i] = create_function('$settings', 'return setting_nzb_television_search($settings, \'' . $i . '\');');
		$settings[] = 'nzb_television_search_' . $i;
	}
	
	// add wrapper functions for validating a service entry
	for($i = 0; $i < 10; $i++)
	{
		$GLOBALS['setting_tor_television_search_' . $i] = create_function('$settings', 'return setting_tor_television_search($settings, \'' . $i . '\');');
		$settings[] = 'tor_television_search_' . $i;
	}
	
	return $settings;
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_nzb_television_search($settings, $index)
{
	// return the same static service as listed in the nzbservice module
	if($index == 0)
		return 'http://nzbmatrix.com/nzb-search.php?cat=6&search=%s%%20s%02de%02d';
	if($index == 1)
		return 'http://www.newzbin.com/search/query/?searchaction=Go&category=8&q=%s%%20%dx%02d';

	// don't continue with this if stuff is missing
	if(isset($settings['nzb_television_search_' . $index]) && 
		$settings['nzb_television_search_' . $index] != ''
	)
		return $settings['nzb_television_search_' . $index];
	// use default
	elseif(isset($settings['nzbservice_' . $index]['search']) && 
		$settings['nzbservice_' . $index]['search'] != ''
	)
		return $settings['nzbservice_' . $index]['search'];
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_tor_television_search($settings, $index)
{
	// the static services to not have movies, only tv and music
	if($index == 0 || $index == 1)
		return '';
	if($index == 2)
		return 'http://tvtorrents.com/loggedin/search.do?search=%s %d %02d';

	// don't continue with this if stuff is missing
	if(isset($settings['tor_movie_search_' . $index]) && 
		$settings['tor_movie_search_' . $index] != ''
	)
		return $settings['tor_movie_search_' . $index];
	// use default
	elseif(isset($settings['torservice_' . $index]['search']) && 
		$settings['torservice_' . $index]['search'] != ''
	)
		return $settings['torservice_' . $index]['search'];
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_episode($request)
{
	return generic_validate_numeric($request, 'episode');
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_season($request)
{
	return generic_validate_numeric($request, 'season');
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_show_index($request)
{
	return generic_validate_numeric($request, 'show_index');
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_showname($request)
{
	return generic_validate_all_safe($request, 'showname');
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_show_status($request)
{
	if(isset($request['show_status']) && $request['show_status'] != '' && preg_match('/^[a-z0-9-]*$/i', $request['show_status']) != 0)
		return $request['show_status'];
}
	
/**
 * Implementation of configure
 * @ingroup configure
 */
function configure_tv_download($settings)
{
	$settings['myepisodes'] = setting('myepisodes');
	
	$options = array();
	
	$feeds = array();
	
	$feeds['myepisodes'] = array(
		'name' => 'My Episodes Account',
		'status' => '',
		'description' => array(
			'list' => array(
				'Enter your MyEpisodes.com username and password to download the list of your selected TV Shows.',
			),
		),
		'type' => 'set',
		'options' => array(
			'setting_myepisodes[username]' => array(
				'type' => 'text',
				'name' => 'Username',
				'value' => $settings['myepisodes']['username'],
			),
			array(
				'value' => '<br />'
			),
			'setting_myepisodes[password]' => array(
				'type' => 'text',
				'name' => 'Password',
				'value' => $settings['myepisodes']['password'],
			),
		),
	);
	
	$options['tv_input'] = array(
		'name' => 'TV Show Input',
		'type' => 'fieldset',
		'options' => $feeds
	);
	
	$download = array();
	
	if(setting('nzbservices_enable') == true)
	{
		// add nzb services
		$nzbservices = configure_nzbservices($settings);
		$download = array_merge($download, $nzbservices['nzbservices']['options']);
	}
	
	if(setting('torservices_enable') == true)
	{
		// add torrent services
		$torservices = configure_torservices($settings);
		$download = array_merge($download, $torservices['torservices']['options']);
	}
	
	if(!is_module('torservices') && !is_module('nzbservices'))
	{
		$download['services'] = array(
			'name' => 'Download Services',
			'status' => 'warn',
			'description' => array(
				'list' => array(
					'This module takes advantage of torrent and news group services.',
					'In order to use this module, the service modules must also be installed.'
				),
			),
			'text' => 'No download service modules installed!',
		);
	}
	
	$options['tv_download'] = array(
		'name' => 'TV Show Downloads',
		'type' => 'fieldset',
		'options' => $download
	);
	
	return $options;
}

/**
 * Implementation of output
 * @ingroup output
 */
function output_tv_download($request)
{
	// output configuration link
	raise_error('You may need to <a href="' . url('admin/module/tv_download') . '">configure</a> this tool in order to use it properly.', E_WARN);

	// perform television downloading
	// log in to myepisodes
	$infos['login'] = array(
		'name' => 'MyEpisodes, Service Login',
		'status' => '',
		'description' => array(
			'list' => array(
				'Logging in to myepisodes.com and the configured NZB services.',
			),
		),
		'text' => array(
			'loading' => 'Loading...'
		),
		'type' => 'theme',
		'value' => 'singular',
		'href' => url('admin/tools/television/downloader/login', true),
	);
	
	// output info
	register_output_vars('infos', array(
		'tv_downloader' => array(
			'name' => 'TV Downloader',
			'type' => 'fieldset',
			'options' => $infos
		),
	));
	
	theme('tool_info');
}

/**
 * Helper function for performing searches and downloading NZBs
 * @param showname the name of the show to search for
 * @param season the season number
 * @param episode the episode number
 * @return a status indicating if the file has been downloaded successfully
 */
function television_fetch_nzb($showname, $season, $episode)
{
	// construct search arguments
	$args = func_get_args();
	
	$services = setting('all_nzbservices');
	
	// loop through NZB services until we find the show
	foreach($services as $i => $config)
	{
		$search = setting('nzb_television_search_' . $i);
		
		// run query, using television search strings
		$result = fetch(sprintf($search, urlencode($showname), urlencode($season), urlencode($episode)), array(), array(), session('nzbservices_' . $i));
		
		// match nzbs
		$count = preg_match_all($config['match'], $result['content'], $matches);
		
		if($count > 0)
		{
			if($address = generic_validate_hostname(array('address' => $matches[1][0]), 'address'))
				$file = $matches[1][0];
			else
			{
				if($address = generic_validate_hostname(array('address' => $config['search']), 'address'))
					$file = $address . '/' . $matches[1][0];
				else
					$file = $matches[1][0];
			}
				
			// download and save
			$result = fetch($file, array(), array(), session('nzbservices_' . $i));
			
			if(strlen($result['content']) == 0)
				return false;
			
			$path = setting('nzbpath') . television_rename_show($showname, $season, $episode, $result['headers']);

			if($fh = fopen($path, 'w'))
			{
				fwrite($fh, $result['content']);
				fclose($fh);
				
				return $path;
			}
			else
				return -1;
		}
	}
	
	return false;
}

function television_rename_show($showname, $season, $episode, $headers)
{
	if(!($filename = get_filename($headers)))
		$filename = $showname . ' Season ' . $season . ' Episode ' . $episode . '.nzb';

	return $filename;
}
