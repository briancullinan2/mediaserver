<?php


function menu_file_rename()
{
	return array(
		'admin/tools/files/rename' => array(
			'callback' => 'output_file_rename',
		),
	);
}

/**
 * Implementation of output
 * @ingroup output
 */
function output_file_rename($request)
{
	$infos = array();

	// perform television downloading
	$infos['regular_expression'] = array(
		'name' => '(1) Regular Expression',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_regexp[match]' => array(
				'name' => 'Match',
				'type' => 'text',
				'value' => $request['rename_regexp']['match'],
				'description' => 'Regular Expression "match" pattern'
			),
			'rename_regexp[replace]' => array(
				'name' => 'Replace',
				'type' => 'text',
				'value' => $request['rename_regexp']['replace'],
				'description' => 'Regular Expression "replace" pattern'
			),
			'rename_regexp[include_ext]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_regexp']['include_ext'],
				'options' => array(
					'true' => 'Include Ext.',
				),
				'description' => 'Include the filename extension in the regular expression rules'
			),
		),
	);
	
	$infos['filename'] = array(
		'name' => '(2) Filename Changes',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_file[change]' => array(
				'type' => 'select',
				'value' => $request['rename_file']['change'],
				'options' => array('Keep', 'Remove', 'Fixed', 'Reverse'),
				'description' => 'Keep or remove the filename'
			),
			'rename_file[fixed]' => array(
				'name' => 'Name',
				'type' => 'text',
				'value' => $request['rename_file']['fixed'],
				'description' => 'Use a fixed filename'
			),
		),
	);
	
	$infos['replace'] = array(
		'name' => '(3) Match and Replace',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_replace[replace]' => array(
				'name' => 'Replace',
				'type' => 'text',
				'value' => $request['rename_replace']['replace'],
				'description' => 'Text to be replaced'
			),
			'rename_replace[with]' => array(
				'name' => 'With',
				'type' => 'text',
				'value' => $request['rename_replace']['with'],
				'description' => 'Text to replace with'
			),
			'rename_replace[match_case]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_replace']['match_case'],
				'options' => array(
					'true' => 'Match Case',
				),
				'description' => 'Match/ignore case when performing replacements'
			),
		),
	);
	
	$infos['case'] = array(
		'name' => '(4) Change Case',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_case[case]' => array(
				'type' => 'select',
				'value' => $request['rename_case']['case'],
				'options' => array('Same', 'Lower', 'Upper', 'Title', 'Sentence'),
				'description' => 'Change the case of the filename'
			),
			'rename_case[except]' => array(
				'name' => 'Exception',
				'type' => 'text',
				'value' => $request['rename_case']['except'],
				'description' => 'Words listed here will retain the case as entered'
			),
		),
	);
	
	$infos['remove'] = array(
		'name' => '(5) Remove Characters',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_remove[first]' => array(
				'name' => 'First n',
				'type' => 'text',
				'value' => $request['rename_remove']['first'],
				'description' => 'Remove the first n characters'
			),
			'rename_remove[last]' => array(
				'name' => 'Last n',
				'type' => 'text',
				'value' => $request['rename_remove']['last'],
				'description' => 'Remove the last n characters'
			),
			'rename_remove[from]' => array(
				'name' => 'From',
				'type' => 'text',
				'value' => $request['rename_remove']['from'],
				'description' => 'Remove text starting at this position'
			),
			'rename_remove[to]' => array(
				'name' => 'To',
				'type' => 'text',
				'value' => $request['rename_remove']['to'],
				'description' => 'Remove text up to this position'
			),
			'rename_remove[chars]' => array(
				'name' => 'Characters',
				'type' => 'text',
				'value' => $request['rename_remove']['chars'],
				'description' => 'List of characters to remove from filename'
			),
			'rename_remove[words]' => array(
				'name' => 'Words',
				'type' => 'text',
				'value' => $request['rename_remove']['words'],
				'description' => 'Specify a space separated list of words to remove from the filename'
			),
			'rename_remove[crop]' => array(
				'name' => 'Crop',
				'type' => 'select',
				'value' => $request['rename_remove']['crop'],
				'options' => array('Before', 'After', 'Special'),
				'description' => 'Specify whether to crop Before or After a specific word'
			),
			'rename_remove[crop_str]' => array(
				'type' => 'text',
				'value' => $request['rename_remove']['crop_str'],
				'description' => 'Specify a marker to be used when cropping'
			),
			'rename_remove[remove]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_remove']['remove'],
				'options' => array('Digits', 'High', 'Trim', 'Double Spaces', 'Accents', 'Characters', 'Symbols')
			),
			'rename_remove[lead]' => array(
				'name' => 'Lead Dots',
				'type' => 'select',
				'value' => $request['rename_remove']['lead'],
				'options' => array('None', '.', '..', 'Both')
			),
		),
	);
	
	$infos['move_copy'] = array(
		'name' => '(6) Move/Copy',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_move[copy]' => array(
				'type' => 'select',
				'value' => $request['rename_move']['copy'],
				'options' => array('None', 'Copy first n', 'Copy last n', 'Move first n', 'Move last n'),
				'description' => 'Specify where you want to move/copy from'
			),
			'rename_move[copy_n]' => array(
				'type' => 'text',
				'value' => $request['rename_move']['copy_n'],
				'description' => 'The number of characters to move or copy'
			),
			'rename_move[to]' => array(
				'type' => 'select',
				'value' => $request['rename_move']['to'],
				'options' => array('None', 'To start', 'To end', 'To position'),
				'description' => 'Specify where you want to move/copy to'
			),
			'rename_move[to_n]' => array(
				'type' => 'text',
				'value' => $request['rename_move']['to_n'],
				'description' => 'The position to move/copy the characters to, when moving to a specific position'
			),
			'rename_move[separator]' => array(
				'name' => 'Separator',
				'type' => 'text',
				'value' => $request['rename_move']['separator'],
				'description' => 'Separator character(s) to insert between the existing filename and the moved/copied characters'
			),
		),
	);
	
	$infos['add'] = array(
		'name' => '(7) Add',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_add[prefix]' => array(
				'name' => 'Prefix',
				'type' => 'text',
				'value' => $request['rename_add']['prefix'],
				'description' => 'Text to prepend to the filename'
			),
			'rename_add[insert]' => array(
				'name' => 'Insert',
				'type' => 'text',
				'value' => $request['rename_add']['insert'],
				'description' => 'Insert text into a filename'
			),
			'rename_add[pos]' => array(
				'name' => 'at position',
				'type' => 'text',
				'value' => $request['rename_add']['pos'],
				'description' => 'Insert text at position n'
			),
			'rename_add[suffix]' => array(
				'name' => 'Suffix',
				'type' => 'text',
				'value' => $request['rename_add']['suffix'],
				'description' => 'Text to append to the filename'
			),
			'rename_add[space]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_add']['space'],
				'options' => array('Word Space'),
				'description' => 'Automatically space words'
			),
		),
	);
	
	$infos['autodate'] = array(
		'name' => '(8) Auto Date',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_date[mode]' => array(
				'name' => 'Mode',
				'type' => 'select',
				'value' => $request['rename_date']['mode'],
				'options' => array('None', 'Prefix', 'Suffix'),
				'description' => 'Specify which type of date to add to the filename'
			),
			'rename_date[type]' => array(
				'name' => 'Type',
				'type' => 'select',
				'value' => $request['rename_date']['type'],
				'options' => array('Creation (Curr.)', 'Creation (New)', 'Modified (Curr.)', 'Modified (New)', 'Accessed (Curr.)', 'Accessed (New)', 'Current'),
				'description' => 'Specify the type of date to include'
			),
			'rename_date[format]' => array(
				'name' => 'Format',
				'type' => 'select',
				'value' => $request['rename_date']['format'],
				'options' => array('Custom'),
				'description' => 'Choose a format for the date'
			),
			'rename_date[separator]' => array(
				'name' => 'Separator',
				'type' => 'text',
				'value' => $request['rename_date']['separator'],
				'description' => 'Specify a separator to put between the filename and the date'
			),
			'rename_date[segment]' => array(
				'name' => 'Segment',
				'type' => 'text',
				'value' => $request['rename_date']['segment'],
				'description' => 'Separate date segments with this text'
			),
			'rename_date[custom]' => array(
				'name' => 'Custom',
				'type' => 'text',
				'value' => $request['rename_date']['custom'],
				'description' => 'Custom format for autodate text'
			),
			'rename_date[century]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_date']['century'],
				'options' => array('Century'),
				'description' => 'Tick this box to include the century in the dates (e.g. 2004 instead of 04)'
			),
			'rename_date[offset]' => array(
				'name' => 'Offset',
				'type' => 'text',
				'value' => $request['rename_date']['offset'],
				'description' => 'Specify and offset, in hours, to apply to the date/time'
			),
		),
	);
	
	$infos['folder_name'] = array(
		'name' => '(9) Append Folder Name',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_folder[name]' => array(
				'name' => 'Name',
				'type' => 'select',
				'value' => $request['rename_folder']['name'],
				'options' => array('None', 'Prefix', 'Suffix'),
				'description' => 'Prepend/Append folder name to the filename'
			),
			'rename_folder[separator]' => array(
				'name' => 'Separator',
				'type' => 'text',
				'value' => $request['rename_folder']['separator'],
				'description' => 'Separate the folder from the filename with these characters'
			),
			'rename_folder[levels]' => array(
				'name' => 'Levels',
				'type' => 'text',
				'value' => $request['rename_folder']['levels'],
				'description' => 'The number of levels of of folders to add to the filename'
			),
		),
	);
	
	$bases = array();
	for($i = 2; $i <= 36; $i++)
	{
		if($i == 2)
			$bases[] = 'Base 2 (Binary)';
		elseif($i == 8)
			$bases[] = 'Base 8 (Octal)';
		elseif($i == 10)
			$bases[] = 'Base 10 (Decimal)';
		elseif($i == 16)
			$bases[] = 'Base 16 (Hex)';
		else
			$bases[] = 'Base ' . $i;
	}
	$bases[] = 'A-Z';
	$bases[] = 'a-z';
	
	$infos['numbering'] = array(
		'name' => '(10) Numbering',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_numbering[mode]' => array(
				'name' => 'Mode',
				'type' => 'select',
				'value' => $request['rename_numbering']['mode'],
				'options' => array('None', 'Prefix', 'Suffix', 'Prefix + Suffix', 'Insert'),
				'description' => 'Specify how to append autonumber text'
			),
			'rename_numbering[at]' => array(
				'name' => 'at',
				'type' => 'text',
				'value' => $request['rename_numbering']['at'],
				'description' => 'Insert autonumber text at position'
			),
			'rename_numbering[start]' => array(
				'name' => 'Start',
				'type' => 'text',
				'value' => $request['rename_numbering']['start'],
				'description' => 'Autonumber start-number'
			),
			'rename_numbering[increment]' => array(
				'name' => 'Increment',
				'type' => 'text',
				'value' => $request['rename_numbering']['increment'],
				'description' => 'Autonumber increment (e.g. to number files in steps of 10)'
			),
			'rename_numbering[padding]' => array(
				'name' => 'Padding',
				'type' => 'text',
				'value' => $request['rename_numbering']['padding'],
				'description' => 'Autonumber padding (e.g. specify 4 to give numbers of 0001, 0002, etc.)'
			),
			'rename_numbering[separator]' => array(
				'name' => 'Separator',
				'type' => 'text',
				'value' => $request['rename_numbering']['separator'],
				'description' => 'Separator between filename and autonumber text'
			),
			'rename_numbering[break]' => array(
				'name' => 'Break',
				'type' => 'text',
				'value' => $request['rename_numbering']['break'],
				'description' => 'Break and restart after nnn matching characters'
			),
			'rename_numbering[folder]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_numbering']['folder'],
				'options' => array('Folder'),
				'description' => 'Prefix of suffix the filename with the name of the parent folder'
			),
			'rename_numbering[type]' => array(
				'name' => 'Type',
				'type' => 'select',
				'value' => $request['rename_numbering']['type'],
				'options' => $bases,
				'description' => 'Represent numbers in this base (e.g. Binary 0, 1, 10, 11, etc.)'
			),
			'rename_numbering[roman]' => array(
				'name' => 'Roman Numerals',
				'type' => 'select',
				'value' => $request['rename_numbering']['roman'],
				'options' => array('None', 'Upper', 'Lower'),
				'description' => 'Represent the number in Roman Numerals'
			),
		),
	);
	
	$infos['extension'] = array(
		'name' => '(11) Extension',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_extension[mode]' => array(
				'name' => 'Mode',
				'type' => 'select',
				'value' => $request['rename_extension']['mode'],
				'options' => array('Same', 'Lower', 'Upper', 'Title', 'Fixed', 'Extra', 'Remove'),
				'description' => 'Change the file extension according to rules'
			),
			'rename_extension[extra]' => array(
				'type' => 'text',
				'value' => $request['rename_extension']['extra'],
				'description' => 'Use a fixed extension for filename'
			),
		),
	);
	
	$infos['select'] = array(
		'name' => '(12) Selection',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_select[filter]' => array(
				'name' => 'Filter',
				'type' => 'text',
				'value' => $request['rename_select']['filter'],
				'description' => 'Pattern to list certain files/folders'
			),
			'rename_select[match]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_select']['match'],
				'options' => array('Match Case'),
				'description' => 'Match case in the filter'
			),
			'rename_select[include]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_select']['include'],
				'options' => array('Folders', 'Files', 'Hidden', 'Subfolders'),
				'description' => 'Include folders/hidden files/sub-folders/files'
			),
			'rename_select[min]' => array(
				'name' => 'Name length min',
				'type' => 'text',
				'value' => $request['rename_select']['min'],
				'description' => 'Minimum filename length to process'
			),
			'rename_select[max]' => array(
				'name' => 'Name length max',
				'type' => 'text',
				'value' => $request['rename_select']['max'],
				'description' => 'Maximum filename length to process'
			),
			'rename_select[min_path]' => array(
				'name' => 'Path length min',
				'type' => 'text',
				'value' => $request['rename_select']['min_path'],
				'description' => 'Minimum pathname length to process'
			),
			'rename_select[max_path]' => array(
				'name' => 'Path length max',
				'type' => 'text',
				'value' => $request['rename_select']['max_path'],
				'description' => 'Maximum pathname length to process'
			),
		),
	);
	
	$infos['location'] = array(
		'name' => '(13) New Location',
		'status' => '',
		'type' => 'set',
		'options' => array(
			'rename_location[path]' => array(
				'name' => 'Path',
				'type' => 'text',
				'value' => $request['rename_location']['path'],
				'description' => 'Specify a new location for the renamed files to be moved/copied to'
			),
			'rename_location[copy]' => array(
				'type' => 'checkbox',
				'value' => $request['rename_location']['copy'],
				'options' => array('Copy not Move'),
				'description' => 'Specify that the renamed files should be copied, rather than moved'
			),
		),
	);
	
	register_output_vars('infos', array(
		'file_rename' => array(
			'name' => 'Rename Options',
			'type' => 'fieldset',
			'options' => $infos
		),
	));
	
	theme('tool_info');
}
