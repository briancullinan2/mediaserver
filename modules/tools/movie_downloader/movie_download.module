<?php

function menu_movie_download()
{
	return array(
		'admin/tools/movies/downloader' => array(
			'callback' => 'output_movie_download',
		),
		'admin/tools/movies/downloader/login/%service_index' => array(
			'callback' => 'output_movie_download_login'
		),
		'admin/tools/movies/downloader/netflix' => array(
			'callback' => 'output_movie_download_netflix',
			'type' => MENU_CALLBACK
		),
		'admin/tools/movies/downloader/search/%movie_index' => array(
			'callback' => 'output_movie_download_search'
		),
	);
}

function setup_movie_download()
{
	require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'mvdl.singular.inc';
	require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'netflix.inc';
}

function validate_movie_index($request)
{
	return generic_validate_numeric_zero($request, 'movie_index');
}

/**
 * Implementation of configure
 * @ingroup configure
 */
function configure_movie_download($settings)
{
	$settings['netflix_xml'] = setting('netflix_xml');
	
	$options = array();
	
	$feeds = array();
	
	$feeds['setting_netflix_xml'] = array(
		'name' => 'Netflix XML Q',
		'status' => '',
		'description' => array(
			'list' => array(
				'Enter the id of the RSS feed to compare to movies on disk or NZB services.',
				array(
					'The Netflix RSS feeds can be found by going to ',
					'link' => array(
						'url' => 'http://www.netflix.com/RSSFeeds',
						'text' => 'Netflix RSS Feeds',
					),
					'.',
				),
				'It is recommended you enter the id for the entire Queue.'
			),
		),
		'type' => 'text',
		'value' => $settings['netflix_xml'],
	);
	
	$movies = configure_movies($settings);
	$feeds = array_merge($feeds, $movies['movies']['options']);
	
	$options['movie_input'] = array(
		'name' => 'Movie Input',
		'type' => 'fieldset',
		'options' => $feeds
	);
	
	return $options;
}

/**
 * Implementation of output
 * @ingroup output
 */
function output_movie_download($request)
{
	$infos = array();

	// output configuration link
	raise_error(array(
		'You may need to ',
		'link' => array(
			'url' => 'admin/module/movie_download',
			'text' => 'configure'
		),
		' this tool in order to use it properly.'
	), E_WARN);

	$infos = get_download_services_login(NULL, 'admin/tools/movies/downloader/login/');
	
	register_output_vars('infos', array(
		'movie_downloader' => array(
			'name' => 'Movie Downloader',
			'type' => 'fieldset',
			'options' => $infos
		),
	));
	
	theme('tool_info');
}

/**
 * Helper function for fetching all movies from services
 */
function movies_fetch_movies($movie)
{
	$downloads = array();
	
	$services = setting('all_download_services', 'movies');
	
	// loop through NZB services until we find the show
	foreach($services as $i => $config)
	{
		if($config['search'] != '')
		{
			// run query, using television search strings
			$result = fetch(sprintf($config['search'], urlencode($movie)), array(), array(), session('download_services_' . $i));

			// match nzbs
			$count = preg_match_all($config['match'], $result['content'], $matches);

			if($count > 0)
			{
				// return list of downloads
				$downloads[] = array('link' => array(
					'url' => sprintf($config['search'], urlencode($movie)),
					'text' => htmlspecialchars($movie) . ' on ' . htmlspecialchars($config['name']) . ' (' . $count . ') <img src="' . $config['image'] . '" alt="icon" />'
				));
			}
		}
	}

	return $downloads;
}

/**
 * Helper function for getting the tokens for all the movies
 @return an associative array contains movie names and tokens
 */
function movies_get_movie_tokens()
{
	// get movie folders
	$settings['movie_folders'] = setting('movie_folders');
	
	// first get all directories and merge file paths, and tokens
	$names = array();
	$tokens = array();
	$filepaths = array();
	foreach($settings['movie_folders'] as $i => $folder)
	{
		$movies = scan_directory($folder);
		
		foreach($movies as $j => $file)
		{
			$names[] = basename($file);
			$tmp_tokens = tokenize(basename($file));
			sort($tmp_tokens['Most']);
			$tokens[] = implode(' ', $tmp_tokens['Most']);
			$filepaths[] = $file;
		}
	}
	
	return array(
		'names' => $names,
		'tokens' => $tokens,
		'filepaths' => $filepaths,
	);
}

/**
 * Helper function
 * @return an associative array of all the repeated files on disk
 */
function movies_repeats_on_disk($disk)
{
	$result = array();
	
	// try names first because it's easiest
	$repeats = array_diff_key($disk['names'], array_unique($disk['names']));
	$orig = array_flip(array_unique($disk['names']));
	foreach($repeats as $id => $movie)
	{
		$result[] = array($disk['filepaths'][$id], $disk['filepaths'][$orig[$movie]]);
	}
	
	// now do tokens
	$repeats = array_diff_key($disk['tokens'], array_unique($disk['tokens']));
	$orig = array_flip(array_unique($disk['tokens']));
	foreach($repeats as $id => $movie)
	{
		// exclude movies in the same folder
		if(dirname($disk['filepaths'][$id]) != dirname($disk['filepaths'][$orig[$movie]]))
			$result[] = array($disk['filepaths'][$id], $disk['filepaths'][$orig[$movie]]);
	}
	
	return $result;
}
