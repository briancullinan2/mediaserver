<?php

function menu_movie_download()
{
	return array(
		'admin/tools/movies/downloader' => array(
			'callback' => 'output_movie_download',
		),
		'admin/tools/movies/downloader/%info_singular_step_movies' => array(
			'callback' => 'output_movie_download_singular'
		)
	);
}

function setup_movie_download()
{
	require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'mvdl.singular.inc';
	require_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'netflix.inc';
}

/**
 * Set up the list of settings
 * @ingroup setup
 */
function setting_movie_download()
{
	$settings = array('netflix_xml');
	
	// add wrapper functions for nzb_movie_search
	for($i = 0; $i < 10; $i++)
	{
		$GLOBALS['setting_nzb_movie_search_' . $i] = create_function('$settings', 'return setting_nzb_movie_search($settings, \'' . $i . '\');');
		$settings[] = 'nzb_movie_search_' . $i;
	}
	
	// add wrapper functions for tor_movie_search
	for($i = 0; $i < 10; $i++)
	{
		$GLOBALS['setting_tor_movie_search_' . $i] = create_function('$settings', 'return setting_tor_movie_search($settings, \'' . $i . '\');');
		$settings[] = 'tor_movie_search_' . $i;
	}
	
	return $settings;
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_nzb_movie_search($settings, $index)
{
	// return the same static service as listed in the nzbservice module
	if($index == 0)
		return 'http://nzbmatrix.com/nzb-search.php?cat=1&search=%s';
	if($index == 1)
		return 'http://www.newzbin.com/search/query/?searchaction=Go&group=alt.binaries.dvd&q=%s';

	// don't continue with this if stuff is missing
	if(isset($settings['nzb_movie_search_' . $index]) && 
		$settings['nzb_movie_search_' . $index] != ''
	)
		return $settings['nzb_movie_search_' . $index];
	// use default
	elseif(isset($settings['nzbservice_' . $index]['search']) && 
		$settings['nzbservice_' . $index]['search'] != ''
	)
		return $settings['nzbservice_' . $index]['search'];
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_tor_movie_search($settings, $index)
{
	// the static services to not have movies, only tv and music
	if($index == 0 || $index == 1 || $index == 2)
		return '';
	if($index == 3)
		return 'http://thedvdclub.org/browse.php?search=%s&cat=0&blah=0&incldead=1';

	// don't continue with this if stuff is missing
	if(isset($settings['tor_movie_search_' . $index]) && 
		$settings['tor_movie_search_' . $index] != ''
	)
		return $settings['tor_movie_search_' . $index];
	// use default
	elseif(isset($settings['torservice_' . $index]['search']) && 
		$settings['torservice_' . $index]['search'] != ''
	)
		return $settings['torservice_' . $index]['search'];
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_movie_download($request, $index)
{
	switch($index)
	{
		case 'info_singular_step_movies':
			if(isset($request['info_singular_step_movies']) &&
				in_array($request['info_singular_step_movies'], array('login', 'login2', 'netflix', 'search'))
			)
				return $request['info_singular_step_movies'];
		break;
		case 'movie_index':
			return generic_validate_numeric_zero($request, 'movie_index');
		break;
	}
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_movie_search($request)
{
	if(isset($request['movie_search']) && is_string($request['movie_search']))
		return generic_validate_all_safe($request, 'movie_search');
	
	if(!isset($request['movie_search']['search']))
		return;
		
	if(isset($request['movie_search']['text']))
		return $request['movie_search']['text'];
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_movie_search_torindex($request)
{
	return generic_validate_numeric($request, 'movie_search_torindex');
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_movie_search_nzbindex($request)
{
	return generic_validate_numeric($request, 'movie_search_nzbindex');
}

/**
 * Implementation of configure
 * @ingroup configure
 */
function configure_movie_download($settings)
{
	$settings['netflix_xml'] = setting('netflix_xml');
	
	$options = array();
	
	$feeds = array();
	
	$feeds['setting_netflix_xml'] = array(
		'name' => 'Netflix XML Q',
		'status' => '',
		'description' => array(
			'list' => array(
				'Enter the id of the RSS feed to compare to movies on disk or NZB services.',
				array(
					'The Netflix RSS feeds can be found by going to ',
					'link' => array(
						'url' => 'http://www.netflix.com/RSSFeeds',
						'text' => 'Netflix RSS Feeds',
					),
					'.',
				),
				'It is recommended you enter the id for the entire Queue.'
			),
		),
		'type' => 'text',
		'value' => $settings['netflix_xml'],
	);
	
	$movies = configure_movies($settings);
	$feeds = array_merge($feeds, $movies['movies']['options']);
	
	$options['movie_input'] = array(
		'name' => 'Movie Input',
		'type' => 'fieldset',
		'options' => $feeds
	);
	
	$download = array();
	
	if(setting('nzbservices_enable') == true)
	{
		// add nzb services
		$nzbservices = configure_nzbservices($settings);
		$download = array_merge($download, $nzbservices['nzbservices']['options']);
	}
	
	if(setting('torservices_enable') == true)
	{
		// add torrent services
		$torservices = configure_torservices($settings);
		$download = array_merge($download, $torservices['torservices']['options']);
	}
	
	if(!is_module('torservices') && !is_module('nzbservices'))
	{
		$download['services'] = array(
			'name' => 'Download Services',
			'status' => 'warn',
			'description' => array(
				'list' => array(
					'This module takes advantage of torrent and news group services.',
					'In order to use this module, the service modules must also be installed.'
				),
			),
			'text' => 'No download service modules installed!',
		);
	}
	
	$options['tv_download'] = array(
		'name' => 'Movie Downloads',
		'type' => 'fieldset',
		'options' => $download
	);
	
	return $options;
}

/**
 * Implementation of output
 * @ingroup output
 */
function output_movie_download($request)
{
	// save the manual search to use later
	if(isset($request['movie_search']))
		session('movie_search', $request['movie_search']);
	else
		$request['movie_search'] = session('movie_search');

	$infos = array();

	// output configuration link
	raise_error('You may need to <a href="' . url('admin/module/movie_download') . '">configure</a> this tool in order to use it properly.', E_WARN);

	// perform television downloading
	// log in to services
	$infos['movies_login'] = array(
		'name' => 'NZB Services Login',
		'status' => '',
		'description' => array(
			'list' => array(
				'Logging in to NZB Services.',
			),
		),
		'text' => array(
			'loading' => 'Loading...'
		),
		'type' => 'theme',
		'value' => 'singular',
		'href' => url('admin/tools/movies/downloader/login', true),
	);
	
	register_output_vars('infos', array(
		'movie_downloader' => array(
			'name' => 'Movie Downloader',
			'type' => 'fieldset',
			'options' => $infos
		),
	));
	
	theme('tool_info');
}

/**
 * Helper function for fetching all movies from services
 */
function movies_fetch_movie_service($movie, $i, $is_nzb = true)
{
	$downloads = array();
	
	// get the config
	if($is_nzb)
		$config = setting('nzbservice_' . $i);
	else
		$config = setting('torservice_' . $i);
	
	// load search settings
	if($is_nzb)
		$search = setting('nzb_movie_search_' . $i);
	else
		$search = setting('tor_movie_search_' . $i);
	
	if($search != '')
	{
		// run query, using television search strings
		if($is_nzb)
			$result = fetch(sprintf($search, urlencode($movie)), array(), array(), session('nzbservices_' . $i));
		else
			$result = fetch(sprintf($search, urlencode($movie)), array(), array(), session('torservices_' . $i));
		
		// match nzbs
		$count = preg_match_all($config['match'], $result['content'], $matches);
		if($count > 0)
		{
			foreach($matches[1] as $i => $link)
			{
				// return list of downloads
				$downloads[$i] = array('link' => array('href' => $link, 'name' => htmlspecialchars($movie)));
			}
		}
	}
	
	return $downloads;
}

/**
 * Helper function for fetching all movies from services
 */
function movies_fetch_movies($movie)
{
	$downloads = array();
	
	$nzbservices = setting('all_nzbservices');
	
	// loop through NZB services until we find the show
	foreach($nzbservices as $i => $config)
	{
		$search = setting('nzb_movie_search_' . $i);
			
		if($search != '')
		{
			// run query, using television search strings
			$result = fetch(sprintf($search, urlencode($movie)), array(), array(), session('nzbservices_' . $i));

			// match nzbs
			$count = preg_match_all($config['match'], $result['content'], $matches);

			if($count > 0)
			{
				// return list of downloads
				$downloads[] = array('link' => array(
					'url' => sprintf($search, urlencode($movie)),
					'text' => htmlspecialchars($movie) . ' on ' . htmlspecialchars($config['name']) . ' (' . $count . ') <img src="' . $config['image'] . '" alt="icon" />'
				));
			}
		}
	}
	
	$torservices = setting('all_torservices');
	
	// loop through NZB services until we find the show
	foreach($torservices as $i => $config)
	{
		$search = setting('tor_movie_search_' . $i);
		
		if($search != '')
		{
			// run query, using television search strings
			$result = fetch(sprintf($search, urlencode($movie)), array(), array(), session('torservices_' . $i));
			
			// match nzbs
			$count = preg_match_all($config['match'], $result['content'], $matches);
			if($count > 0)
			{
				// return list of downloads
				$downloads[] = array('link' => array(
					'url' => sprintf($search, urlencode($movie)),
					'text' => htmlspecialchars($movie) . ' on ' . htmlspecialchars($config['name']) . ' (' . $count . ') <img src="' . $config['image'] . '" alt="icon" />'
				));
			}
		}
	}

	return $downloads;
}

/**
 * Helper function for getting the tokens for all the movies
 @return an associative array contains movie names and tokens
 */
function movies_get_movie_tokens()
{
	// get movie folders
	$settings['movie_folders'] = setting('movie_folders');
	
	// first get all directories and merge file paths, and tokens
	$names = array();
	$tokens = array();
	$filepaths = array();
	foreach($settings['movie_folders'] as $i => $folder)
	{
		$movies = scan_directory($folder);
		
		foreach($movies as $j => $file)
		{
			$names[] = basename($file);
			$tmp_tokens = tokenize(basename($file));
			sort($tmp_tokens['Most']);
			$tokens[] = implode(' ', $tmp_tokens['Most']);
			$filepaths[] = $file;
		}
	}
	
	return array(
		'names' => $names,
		'tokens' => $tokens,
		'filepaths' => $filepaths,
	);
}

/**
 * Helper function
 * @return an associative array of all the repeated files on disk
 */
function movies_repeats_on_disk($disk)
{
	$result = array();
	
	// try names first because it's easiest
	$repeats = array_diff_key($disk['names'], array_unique($disk['names']));
	$orig = array_flip(array_unique($disk['names']));
	foreach($repeats as $id => $movie)
	{
		$result[] = array($disk['filepaths'][$id], $disk['filepaths'][$orig[$movie]]);
	}
	
	// now do tokens
	$repeats = array_diff_key($disk['tokens'], array_unique($disk['tokens']));
	$orig = array_flip(array_unique($disk['tokens']));
	foreach($repeats as $id => $movie)
	{
		// exclude movies in the same folder
		if(dirname($disk['filepaths'][$id]) != dirname($disk['filepaths'][$orig[$movie]]))
			$result[] = array($disk['filepaths'][$id], $disk['filepaths'][$orig[$movie]]);
	}
	
	return $result;
}
