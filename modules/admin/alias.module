<?php

// handle selecting of files
function menu_alias()
{
	return array(
		'admin/aliasing' => array(
			'callback' => 'output_module',
			'template' => 'module',
			'arguments' => array(
				'configure_module' => 'alias',
			),
		),
	);
}


/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_add_alias($request)
{
	if(!isset($request['add_alias']['save']))
		return;
		
	return array(
		'paths' => isset($request['add_alias']['paths'])?$request['add_alias']['paths']:'',
		'alias' => isset($request['add_alias']['alias'])?$request['add_alias']['alias']:'',
		'paths_replace' => isset($request['add_alias']['paths_replace'])?$request['add_alias']['paths_replace']:'',
		'alias_replace' => isset($request['add_alias']['alias_replace'])?$request['add_alias']['alias_replace']:'',
	);
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_remove_alias($request)
{
	if(isset($request['remove_alias']))
	{
		// if it is an array because the button value is set to text instead of the index
		if(is_array($request['remove_alias']))
		{
			$keys = array_keys($request['remove_alias']);
			$request['remove_alias'] = $keys[0];
		}
			
		if(is_numeric($request['remove_alias']) && $request['remove_alias'] >= 0 && 
			$request['remove_alias'] < setting('alias_rules')
		)
			return $request['remove_alias'];
	}
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_edit_alias($request)
{
	if(isset($request['edit_alias']))
	{
		// if it is an array because the button value is set to text instead of the index
		if(is_array($request['edit_alias']))
		{
			$keys = array_keys($request['edit_alias']);
			$request['edit_alias'] = $keys[0];
		}
			
		if(is_numeric($request['edit_alias']) && $request['edit_alias'] >= 0 &&
			$request['edit_alias'] < setting('alias_rules')
		)
			return $request['edit_alias'];
	}
}

/**
 * Implementation of status
 * @ingroup status
 */
function status_alias()
{
	$status = array();
		
	if(dependency('alias'))
	{
		$status['admin_alias_enable'] = array(
			'name' => 'Aliasing',
			'status' => '',
			'description' => array(
				'list' => array(
					'Aliasing is enabled.',
				),
			),
			'value' => 'Aliases enabled',
		);
	}
	else
	{
		$status['admin_alias_enable'] = array(
			'name' => 'Aliasing',
			'status' => 'warn',
			'description' => array(
				'list' => array(
					'Aliasing is turned off, and therefore people could see the actual paths to files on the filesystem.',
				),
			),
			'value' => 'Aliases disabled',
		);
	}
	
	return $status;

}

function setting_alias()
{
	$settings = array();

	for($i = 0; $i < 100; $i++)
	{
		$GLOBALS['setting_alias_' . $i] = create_function('$settings', 'return setting_alias_index($settings, \'' . $i . '\');');
		$settings[] = 'alias_' . $i;
	}
	
	return $settings;
}

function setting_alias_index($settings, $index)
{
	// don't continue with this if stuff is missing
	if(!isset($settings['alias_' . $index]) || !isset($settings['alias_' . $index]['paths']) || 
		!isset($settings['alias_' . $index]['paths_replace']) || !isset($settings['alias_' . $index]['alias']) ||
		!isset($settings['alias_' . $index]['alias_replace'])
	)
		return;
		
	// copy values
	$alias = array(
		'paths' => $settings['alias_' . $index]['paths'],
		'alias' => $settings['alias_' . $index]['alias'],
		'paths_replace' => $settings['alias_' . $index]['paths_replace'],
		'alias_replace' => $settings['alias_' . $index]['alias_replace'],
	);
		
	// validate filepaths
	if(!($alias['paths'] = generic_validate_all_safe(array('paths' => $alias['paths']), 'paths')))
		return;
	if(!($alias['alias'] = generic_validate_all_safe(array('alias' => $alias['alias']), 'alias')))
		return;
		
	// validate replacement regular expressions
	if(!($alias['paths_replace'] = generic_validate_regexp(array('paths_replace' => $alias['paths_replace']), 'paths_replace')))
		return;
	if(!($alias['alias_replace'] = generic_validate_regexp(array('alias_replace' => $alias['alias_replace']), 'alias_replace')))
		return;


	return $alias;
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_alias_rules($settings)
{
	$settings['alias_rules'] = array();
	
	// make sure all servers with numeric indexes are on the list
	for($i = 0; $i < 100; $i++)
	{
		$alias = setting_alias_index($settings, $i);
		if(isset($alias))
			$settings['alias_rules'][] = $alias;
	}
	
	return $settings['alias_rules'];
}

function setting_paths_match($settings)
{
	$paths_match = array();
	
	for($i = 0; $i < 100; $i++)
	{
		$alias = setting_alias_index($settings, $i);
		if(isset($alias))
			$paths_match[] = $alias['paths_replace'];
	}
	
	return $paths_match;
}

function setting_alias_match($settings)
{
	$alias_match = array();
	
	for($i = 0; $i < 100; $i++)
	{
		$alias = setting_alias_index($settings, $i);
		if(isset($alias))
			$alias_match[] = $alias['alias_replace'];
	}
	
	return $alias_match;
}

function setting_replace_alias($settings)
{
	$aliases = array();
	
	for($i = 0; $i < 100; $i++)
	{
		$alias = setting_alias_index($settings, $i);
		if(isset($alias))
			$aliases[] = $alias['alias'];
	}
	
	return $aliases;
}
function setting_replace_paths($settings)
{
	$replace_paths = array();
	
	for($i = 0; $i < 100; $i++)
	{
		$alias = setting_alias_index($settings, $i);
		if(isset($alias))
			$replace_paths[] = $alias['paths'];
	}
	
	return $replace_paths;
}


function session_alias($request)
{
	// might be configuring the module
	if(!($save = session('alias')) || isset($request['reset_configuration']))
		$save = array('alias_rules' => setting('alias_rules'));

	// add server
	if(isset($request['add_alias']))
	{
		$new_alias = setting_alias_index(array('alias_0' => $request['add_alias']), 0);
		if(isset($new_alias) && isset($request['edit_alias']))
			$save['alias_rules'][$request['edit_alias']] = $new_alias;
		else
			$save['alias_rules'][] = $new_alias;
	}

	// remove server
	if(isset($request['remove_alias']))
	{
		unset($save['alias_rules'][$request['remove_alias']]);
		$save['alias_rules'] = array_values($save['alias_rules']);
	}
	
	return $save;
}

function configure_alias($settings, $request)
{
	$settings['alias_rules'] = setting('alias_rules');
	
	// store count for unsetting
	$rule_count = count($settings['alias_rules']);
	
	if($session_alias = session('alias'))
	{
		// load aliases from session
		$settings['alias_rules'] = $session_alias['alias_rules'];
	}
	
	$options = array();

	if(count($settings['alias_rules']) > 0)
	{
		$options['manage_aliases'] = array(
			'name' => 'Manage Aliases',
			'status' => '',
			'description' => array(
				'list' => array(
					'Manage the aliasing rules.',
				),
			),
			'type' => 'set',
		);
		
		$alias_options = array();
		foreach($settings['alias_rules'] as $i => $alias)
		{
			$alias_options['setting_alias_' . $i . '[paths]'] = array(
				'type' => 'hidden',
				'value' => $alias['paths'],
			);
			$alias_options['setting_alias_' . $i . '[alias]'] = array(
				'type' => 'hidden',
				'value' => $alias['alias'],
			);
			$alias_options['setting_alias_' . $i . '[paths_replace]'] = array(
				'type' => 'hidden',
				'value' => $alias['paths_replace'],
			);
			$alias_options['setting_alias_' . $i . '[alias_replace]'] = array(
				'type' => 'hidden',
				'value' => $alias['alias_replace'],
			);
			$alias_options['edit_alias[' . $i . ']'] = array(
				'type' => 'submit',
				'value' => 'Edit',
				'name' => $alias['paths'] . ' -> ' . $alias['alias'],
			);
			$alias_options['remove_alias[' . $i . ']'] = array(
				'type' => 'submit',
				'value' => 'Remove',
			);
		}
		
		$options['manage_aliases']['options'] = $alias_options;
	}
	
	if(isset($request['edit_alias']))
		$current_alias = $settings['alias_rules'][$request['edit_alias']];
	else
		$current_alias = array('paths' => '', 'alias' => '', 'paths_replace' => '', 'alias_replace' => '');
	
	$options['alias_rules'] = array(
		'name' => 'Add Aliasing Rule',
		'status' => '',
		'description' => array(
			'list' => array(
				'Enter the regular expressions for replacing file paths displayed to the users.',
			),
		),
		'type' => 'set',
		'options' => array(
			'add_alias[paths]' => array(
				'type' => 'text',
				'name' => 'Paths',
				'value' => $current_alias['paths'],
			),
			'add_alias[alias]' => array(
				'type' => 'text',
				'name' => 'Alias',
				'value' => $current_alias['alias'],
			),
			'add_alias[paths_replace]' => array(
				'type' => 'text',
				'name' => 'Path Match',
				'value' => $current_alias['paths_replace'],
			),
			'add_alias[alias_replace]' => array(
				'type' => 'text',
				'name' => 'Alias Match',
				'value' => $current_alias['alias_replace'],
			),
			'add_alias[save]' => array(
				'type' => 'submit',
				'value' => isset($request['edit_alias'])?'Save Alias':'Add Alias',
			),
		),
	);
	
	if(isset($request['edit_alias']))
		$options['alias_rules']['options']['edit_alias'] = array('type' => 'hidden', 'value' => $request['edit_alias']);
	
	// add unsettings
	for($i = 0; $i < $rule_count - count($settings['alias_rules']); $i++)
	{
		$options['alias_rules']['options']['setting_alais_' . (count($settings['alias_rules']) + $i)] = array(
			'type' => 'hidden',
			'value' => '',
		);
	}
	
	return array('aliasing' => array(
		'name' => 'Aliasing Rules',
		'type' => 'fieldset',
		'options' => $options
	));
}

function alias_replace($file)
{
	return preg_replace(setting('alias_match'), setting('replace_paths'), $file);
}

function paths_replace($file)
{
	return preg_replace(setting('paths_match'), setting('replace_alias'), $file);
}


