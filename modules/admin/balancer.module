<?php

// handle selecting of files
function menu_balancer()
{
	return array(
		'admin/balancer' => array(
			'callback' => 'output_module',
			'template' => 'module',
			'request' => array(
				'configure_module' => 'balancer',
			),
		),
	);
}

/**
 * Set up the list of aliases from the database
 * @ingroup setup
 */
function setting_balancer()
{
	$settings = array();
	
	// add wrapper functions for validating a server entry
	for($i = 0; $i < 10; $i++)
	{
		$GLOBALS['setting_balance_server_' . $i] = create_function('$settings', 'return setting_balance_server($settings, \'' . $i . '\');');
		$settings[] = 'balance_server_' . $i;
	}
	
	// add wrapper functions for validating a server entry
	for($i = 0; $i < 100; $i++)
	{
		$GLOBALS['setting_balance_rule_' . $i] = create_function('$settings', 'return setting_balance_rule($settings, \'' . $i . '\');');
		$settings[] = 'balance_rule_' . $i;
	}
	
	return $settings;
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_remove_server($request)
{
	if(isset($request['remove_server']))
	{
		// if it is an array because the button value is set to text instead of the index
		if(is_array($request['remove_server']))
		{
			$keys = array_keys($request['remove_server']);
			$request['remove_server'] = $keys[0];
		}
			
		if(is_numeric($request['remove_server']) && $request['remove_server'] >= 0)
			return $request['remove_server'];
	}
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_remove_rule($request)
{
	if(isset($request['remove_rule']))
	{
		// if it is an array because the button value is set to text instead of the index
		if(is_array($request['remove_rule']))
		{
			$keys = array_keys($request['remove_rule']);
			$request['remove_rule'] = $keys[0];
		}
			
		if(is_numeric($request['remove_rule']) && $request['remove_rule'] >= 0)
			return $request['remove_rule'];
	}
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_add_server($request)
{
	if(!isset($request['add_server']['save']))
		return;
		
	return array(
		'address' => $request['add_server']['address'],
		'protocol' => isset($request['add_server']['protocol'])?$request['add_server']['protocol']:'https',
		'username' => isset($request['add_server']['username'])?$request['add_server']['username']:'',
		'password' => isset($request['add_server']['password'])?$request['add_server']['password']:'',
		'nickname' => isset($request['add_server']['nickname'])?$request['add_server']['nickname']:'',
	);
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_add_rule($request)
{
	if(!isset($request['add_rule']['save']))
		return;
		
	return array(
		'module' => $request['add_rule']['module'],
		'condition' => isset($request['add_rule']['condition'])?$request['add_rule']['condition']:'',
		'input' => isset($request['add_rule']['input'])?$request['add_rule']['input']:'',
		'value' => isset($request['add_rule']['value'])?$request['add_rule']['value']:'',
		'server' => isset($request['add_rule']['server'])?$request['add_rule']['server']:'',
	);
}

/**
 * Implementation of validate
 * @ingroup validate
 */
function validate_test_rules($request)
{
	if(!isset($request['test_rules']['test']))
		return;
		
	// this will be validated when used
	if(isset($request['test_rules']))
		return array(
			'module' => $request['test_rules']['module'],
			'request' => isset($request['test_rules']['server'])?$request['test_rules']['server']:'',
			'server' => isset($request['test_rules']['server'])?$request['test_rules']['server']:'',
		);
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_balance_server($settings, $index)
{
	// don't continue with this if stuff is missing
	if(!isset($settings['balance_server_' . $index]) || !isset($settings['balance_server_' . $index]['address']) || 
		!isset($settings['balance_server_' . $index]['protocol']) || !isset($settings['balance_server_' . $index]['username']) ||
		!isset($settings['balance_server_' . $index]['password'])
	)
		return;
		
	// copy values
	$server = array(
		'address' => $settings['balance_server_' . $index]['address'],
		'protocol' => $settings['balance_server_' . $index]['protocol'],
		'username' => $settings['balance_server_' . $index]['username'],
		'password' => $settings['balance_server_' . $index]['password'],
		'nickname' => isset($settings['balance_server_' . $index]['nickname'])?$settings['balance_server_' . $index]['nickname']:'',
	);
		
	// validate each part
	if($server['protocol'] != 'http' && $server['protocol'] != 'https')
		return;
		
	// validate address
	if(!($server['address'] = generic_validate_url(array('server_address' => $server['address']), 'server_address')))
		return;
	
	// username and password will be validated when used
	if(!($server['username'] = generic_validate_all_safe(array('server_username' => $server['username']), 'server_username')))
		return;
	if(!($server['password'] = generic_validate_all_safe(array('server_password' => $server['password']), 'server_password')))
		return;
	
	// make sure nickname isn't blank
	if(!($server['nickname'] = generic_validate_all_safe(array('server_nickname' => $server['nickname']), 'server_nickname')))
		
	return $server;
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_balance_rule($settings, $index)
{
	// don't continue with this if stuff is missing
	if(!isset($settings['balance_rule_' . $index]) || !isset($settings['balance_rule_' . $index]['module']) || 
		!isset($settings['balance_rule_' . $index]['condition']) || !isset($settings['balance_rule_' . $index]['value']) || 
		!isset($settings['balance_rule_' . $index]['server'])
	)
		return;
		
	// copy values
	$rule = array(
		'module' => $settings['balance_rule_' . $index]['module'],
		'condition' => $settings['balance_rule_' . $index]['condition'],
		'input' => isset($settings['balance_rule_' . $index]['input'])?$settings['balance_rule_' . $index]['input']:'',
		'value' => $settings['balance_rule_' . $index]['value'],
		'server' => intval($settings['balance_rule_' . $index]['server']),
	);

	// must provide a valid modules
	if(!isset($GLOBALS['modules'][$rule['module']]))
		return;
	
	// must be one of the 3 conditions
	if(!in_array($rule['condition'], array('percent', 'request', 'server')))
		return;
	
	// input must be specified if it is the last 2 conditions
	if(($rule['condition'] == 'request' || $rule['condition'] == 'server') && $rule['input'] == '')
		return;
	elseif($rule['condition'] == 'percent')
		unset($rule['input']);
	
	// value can be anything
	
	// must be a valid server
	$settings['balance_servers'] = setting('balance_servers');
	if(!isset($settings['balance_servers'][$rule['server']]))
		return;
		
	return $rule;
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_balance_servers($settings)
{
	if(!isset($settings['balance_servers']))
		$settings['balance_servers'] = array();
	
	// make sure all servers with numeric indexes are on the list
	for($i = 0; $i < 10; $i++)
	{
		$balancer = setting_balance_server($settings, $i);
		if(isset($balancer))
			$settings['balance_servers'][$i] = $balancer;
	}
	
	return array_values($settings['balance_servers']);
}

/**
 * Implementation of setting
 * @ingroup setting
 */
function setting_balance_rules($settings)
{
	if(!isset($settings['balance_rules']))
		$settings['balance_rules'] = array();
	
	// make sure all servers with numeric indexes are on the list
	for($i = 0; $i < 100; $i++)
	{
		$rule = setting_balance_rule($settings, $i);
		if(isset($rule))
			$settings['balance_rules'][$i] = $rule;
	}
	
	return array_values($settings['balance_rules']);
}

/**
 * Implementation of status
 * @ingroup status
 */
function status_balancer($settings)
{
	$settings['balance_servers'] = setting('balance_servers');
	
	// check servers are up and running, get configurations
	$status = array();
	
	// load servers from session
	if($session_balancer = session('balancer'))
		$settings['balance_servers'] = $session_balancer['servers'];
	
	$additional_info = lang('This server is up and running and ready for balancing.', 'balence server status description');
	
	// loop through each server and check status
	foreach($settings['balance_servers'] as $i => $server)
	{
		// use snoopy to check if sites are running and download config,
		$url = $server['protocol'] . '://' . $server['address'] . 'admin?get_settings=true&users=login&username=' . urlencode($server['username']) . '&password=' . urlencode(base64_encode($server['password']));
		
		// make this quick, only a second or 2 timeout
		$result = fetch($url, array(), array('timeout' => 2), array());
		if($result['status'] != 200)
		{
			$get_status = 'fail';
			$additional_info = lang('The connection to the balance server has failed either because the request did not return a status 200 OK, instead it returned ' . $result['status'] . '.', 'balance server status fail request status');
		}
		else
		{
			$get_status = '';
			$other_settings = explode("\n", $result['content']);
			
			// check contents to make sure it is a config
			if(preg_match('/version ?= ?.+/i', $other_settings[0]) == 0)
			{
				$get_status = 'fail';
				$additional_info = lang('The balancer could not parse this servers settings, there may be a problem with the path to the balancing server.', 'balance server status fail parse ini');
			}
			
			// check the versions are the same
			elseif(preg_match('/version ?= ?' . preg_quote(VERSION) . '/i', $other_settings[0])  == 0)
			{
				$get_status = 'fail';
				$additional_info = lang('This balence server is not the same version as the current server.', 'balance server status fail version');
			}
		}
			
		// check general config conflicts
		//   must handle paths the same way, admin_alias_enable, mod_rewrite_enable
		
		// check balencer conflicts
		
		// output status
		$status['balance_server_' . $i] = array(
			'name' => isset($server['nickname'])?$server['nickname']:('Balance Server ' . $i),
			'status' => $get_status,
			'description' => array(
				'list' => array(
					$additional_info,
				),
			),
			'value' => $server['protocol'] . '://' . $server['address'],
		);
	}
	
	return $status;
}

/**
 * Implementation of session
 * @ingroup session
 */
function session_balancer($request)
{
	// check for configuration or just potenially redirecting users based on rules
	if(isset($request['add_server']) || 
		isset($request['remove_server']) || isset($request['add_rule']) || 
		isset($request['remove_rule']) || isset($request['reset_configuration']))
	{
		// might be configuring the module
		if(!($save = session('balancer')) || isset($request['reset_configuration']))
			$save = array('servers' => setting('balance_servers'), 'rules' => setting('balance_rules'));
	
		// add server
		if(isset($request['add_server']))
		{
			$new_server = setting_balance_server(array('balance_server_0' => $request['add_server']), 0);
			if(isset($new_server))
				$save['servers'][] = $new_server;
		}
	
		// remove server
		if(isset($request['remove_server']))
		{
			unset($save['servers'][$request['remove_server']]);
			$save['servers'] = array_values($save['servers']);
		}
	
		// add rule
		if(isset($request['add_rule']))
		{
			// must also pass in servers from session
			$new_rule = setting_balance_rule(array('balance_rule_0' => $request['add_rule'], 'balance_servers' => $save['servers']), 0);
			if(isset($new_rule))
				$save['rules'][] = $new_rule;
		}
	
		// remove rule
		if(isset($request['remove_rule']))
		{
			unset($save['rules'][$request['remove_rule']]);
			$save['rules'] = array_values($save['rules']);
		}
		
		return $save;
	}
	// must just want to redirect users
	else
	{
		// execute redirect here, so as not to waste anymore time
		$new_server = balancer_get_server($request, $_SERVER);
		
		// check if server has changed
		if($new_server != NULL)
		{
			// redirect session information and user
			location($new_server['protocol'] . '://' . $new_server['address'] . substr(url($request, true), 1));
		}
	}
}

/**
 * Helper function for retreiving the new server
 */
function balancer_get_server($request, $server)
{
	$settings['balance_servers'] = setting('balance_servers');
	$settings['balance_rules'] = setting('balance_rules');
	
	$new_server = NULL;
	foreach($settings['balance_rules'] as $i => $rule)
	{
		// in the order of the rules, try to prove the user should be transfered
		// first check the module is being used
		if($rule['module'] == $request['module'])
		{
			// check the condition
			if($rule['condition'] == 'percent')
			{
				// check the percentage of users and redirect
				if($rule['value'] == 100)
					$new_server = $settings['balance_servers'][$rule['server']];
			}
			elseif($rule['condition'] == 'request')
			{
				if(isset($request[$rule['input']]) && $request[$rule['input']] == $rule['value'])
					$new_server = $settings['balance_servers'][$rule['server']];
			}
			elseif($rule['condition'] == 'server')
			{
				if(isset($_SERVER[$rule['input']]) && $_SERVER[$rule['input']] == $rule['value'])
					$new_server = $settings['balance_servers'][$rule['server']];
			}
		}
	}
	
	return $new_server;
}

/**
 * Implementation of configure
 * @ingroup configure
 */
function configure_balancer($settings, $request)
{
	$settings['balance_servers'] = setting('balance_servers');
	$settings['balance_rules'] = setting('balance_rules');
	
	// store count for unsetting
	$server_count = count($settings['balance_servers']);
	$rule_count = count($settings['balance_rules']);
	
	if($session_balancer = session('balancer'))
	{
		// load servers from session
		$settings['balance_servers'] = $session_balancer['servers'];
	
		// load rules from session
		$settings['balance_rules'] = $session_balancer['rules'];
	}
	
	$options = array();
	
	// display remove options
	if(count($settings['balance_servers']) > 0)
	{
		$options['manage_servers'] = array(
			'name' => 'Manage Servers',
			'status' => '',
			'description' => array(
				'list' => array(
					'Manage the balance servers.',
				),
			),
			'type' => 'set',
		);
		
		$balence_options = array();
		foreach($settings['balance_servers'] as $i => $server)
		{
			$balence_options['setting_balance_server_' . $i . '[address]'] = array(
				'type' => 'hidden',
				'value' => $server['address'],
			);
			$balence_options['setting_balance_server_' . $i . '[protocol]'] = array(
				'type' => 'hidden',
				'value' => $server['protocol'],
			);
			$balence_options['setting_balance_server_' . $i . '[username]'] = array(
				'type' => 'hidden',
				'value' => $server['username'],
			);
			$balence_options['setting_balance_server_' . $i . '[password]'] = array(
				'type' => 'hidden',
				'value' => $server['password'],
			);
			if(isset($server['nickname']))
			{
				$balence_options['setting_balance_server_' . $i . '[nickname]'] = array(
					'type' => 'hidden',
					'value' => $server['nickname'],
				);
			}
			$balence_options['edit_server[' . $i . ']'] = array(
				'type' => 'submit',
				'value' => 'Edit',
				'name' => isset($server['nickname'])?$server['nickname']:('Balance Server ' . $i),
			);
			$balence_options['remove_server[' . $i . ']'] = array(
				'type' => 'submit',
				'value' => 'Remove',
			);
		}
		
		$options['manage_servers']['options'] = $balence_options;
	}
	
	// TODO: put add server removed from request here
	//   using GLOBALS['validated'] == false
	//  raise_error('Server was not added due to errors')
	//  put original values back in?
	
	$options['balance_servers'] = array(
		'name' => 'Add Server',
		'status' => '',
		'description' => array(
			'list' => array(
				'Provide the web-accessible http or https address to a remote media server setup.',
			),
		),
		'type' => 'set',
		'options' => array(
			'add_server[protocol]' => array(
				'type' => 'select',
				'options' => array(
					'http' => 'HTTP',
					'https' => 'Secure HTTP',
				),
				'value' => 'https',
				'name' => 'Server Address',
			),
			'add_server[address]' => array(
				'type' => 'text',
				'value' => 'www2.example.com'
			),
			'add_server[username]' => array(
				'type' => 'text',
				'name' => 'Username',
				'value' => '',
			),
			'add_server[password]' => array(
				'type' => 'text',
				'name' => 'Password',
				'value' => '',
			),
			'add_server[nickname]' => array(
				'type' => 'text',
				'name' => 'Nickname',
				'value' => '',
			),
			'add_server[save]' => array(
				'type' => 'submit',
				'value' => 'Add Server',
			),
		),
	);
	
	// add unsettings
	for($i = 0; $i < $server_count - count($settings['balance_servers']); $i++)
	{
		$options['balance_servers']['options']['setting_balance_server_' . (count($settings['balance_servers']) + $i)] = array(
			'type' => 'hidden',
			'value' => '',
		);
	}
	
	if(count($settings['balance_rules']) > 0)
	{
		// display all rules
		$options['manage_rules'] = array(
			'name' => 'Manage Rules',
			'status' => '',
			'description' => array(
				'list' => array(
					'Manage the balancing rules.',
				),
			),
			'type' => 'set',
		);
		
		$balence_options = array();
		foreach($settings['balance_rules'] as $i => $rule)
		{
			$balence_options['setting_balance_rule_' . $i . '[module]'] = array(
				'type' => 'hidden',
				'value' => $rule['module'],
			);
			$balence_options['setting_balance_rule_' . $i . '[condition]'] = array(
				'type' => 'hidden',
				'value' => $rule['condition'],
			);
			if(isset($rule['input']))
			{
				$balence_options['setting_balance_rule_' . $i . '[input]'] = array(
					'type' => 'hidden',
					'value' => $rule['input'],
				);
			}
			$balence_options['setting_balance_rule_' . $i . '[value]'] = array(
				'type' => 'hidden',
				'value' => $rule['value'],
			);
			$balence_options['setting_balance_rule_' . $i . '[server]'] = array(
				'type' => 'hidden',
				'value' => $rule['server'],
			);
			$balence_options['edit_rule[' . $i . ']'] = array(
				'type' => 'submit',
				'value' => 'Edit',
				'name' => 'Rule module: ' . $GLOBALS['modules'][$rule['module']]['name'] . 
					'Condition: ' . $rule['condition'] . 
					(isset($rule['input'])?'Input: ' . $rule['input']:'') . 
					'Value: ' . $rule['value'] . 
					'Server: ' . (isset($settings['balance_servers'][$rule['server']]['nickname'])?$settings['balance_servers'][$rule['server']]['nickname']:('Balance Server ' . $rule['server'])),
			);
			$balence_options['remove_rule[' . $i . ']'] = array(
				'type' => 'submit',
				'value' => 'Remove',
			);
		}
		
		$options['manage_rules']['options'] = $balence_options;
	}
	elseif(count($settings['balance_servers']) > 0)
	{
		$options['balance_rules_null'] = array(
			'name' => 'Balancing Rules',
			'status' => 'warn',
			'description' => array(
				'list' => array(
					lang('There are no rules defined for balancing.', 'balance rules empty description'),
					lang('Rules have a waterfall effect.  That is, when a request is made, the rule is tested on each condition.  The last condition to satisfy the request is the server it is transfered to.', 'balance rules empty description'),
				),
			),
			'value' => 'No rules defined',
		);
	}
	else
	{
		$options['balance_rules_null'] = array(
			'name' => 'Balancing Rules',
			'status' => 'fail',
			'description' => array(
				'list' => array(
					lang('You must first specify a balancing server!', 'balance rules fail description 1'),
					lang('There are no rules defined for balancing.', 'balance rules fail description 2'),
				),
			),
			'value' => 'Define a server first!',
		);
	}
	
	$modules = array();
	foreach(get_modules() as $module)
	{
		$modules[$module] = get_module($module, 'name');
	}
	
	$servers = array();
	foreach($settings['balance_servers'] as $i => $server)
	{
		$servers[$i . ' '] = isset($server['nickname'])?$server['nickname']:('Balance Server ' . $i);
	}

	$options['balance_rules'] = array(
		'name' => 'Add Rule',
		'status' => '',
		'description' => array(
			'list' => array(
				'Add a rule for balancing.',
				'The Module field is for specifying which module the balancing rule should act on; this is just a shorthand for using a request condition.',
				'Condition is for specifying which type of condition will activate the balancing.',
				'Value is the value for the condition, depending on the condition this value may be different types.',
				'Server is the server to forward the request to when the condition is met.',
			),
		),
		'type' => 'set',
		'options' => array(
			'add_rule[module]' => array(
				'type' => 'select',
				'options' => $modules,
				'value' => 'encode',
				'name' => 'Module',
			),
			'add_rule[condition]' => array(
				'type' => 'select',
				'options' => array(
					'percent' => 'Percentage of Users',
					'request' => 'Request Variable',
					'server' => 'Server Variable',
				),
				'value' => 'request',
				'name' => 'Condition',
			),
			'add_rule[input]' => array(
				'type' => 'text',
				'value' => 'dir',
				'name' => 'Input',
			),
			'add_rule[value]' => array(
				'type' => 'text',
				'value' => '/Share/Music/',
				'name' => 'Value',
			),
			'add_rule[server]' => array(
				'type' => 'select',
				'options' => $servers,
				'value' => 0,
				'name' => 'Server',
			),
			'add_rule[save]' => array(
				'type' => 'submit',
				'value' => 'Add Rule',
			),
		),
	);

	// add unsettings
	for($i = 0; $i < $rule_count - count($settings['balance_rules']); $i++)
	{
		$options['balance_rules']['options']['setting_balance_rule_' . (count($settings['balance_rules']) + $i)] = array(
			'type' => 'hidden',
			'value' => '',
		);
	}
	
	// check if rules were tested on last run
	if(isset($request['test_rules']))
	{
		// run tests
		$tmp_request = core_validate_request(url($request['test_rules']['request'], false, false, true));
		$tmp_request['module'] = validate($tmp_request + array('module' => $request['test_rules']['module']), 'module');

		$new_server = balancer_get_server($tmp_request, url($request['test_rules']['server'], false, false, true));
		$options['test_results'] = array(
			'name' => 'Test Results',
			'status' => '',
			'description' => array(
				'list' => array(
					'The rules were tested and the server the user would be redirected to is displayed.',
				),
			),
			'value' => array(
				'list' => array(
					'Module: ' . $request['test_rules']['module'],
					'Request Input: ' . $request['test_rules']['request'],
					'Server Input: ' . $request['test_rules']['server'],
					'Result: ' . (($new_server != NULL)?($new_server['protocol'] . '://' . $new_server['address']):'Current Location'),
				)
			)
		);
	}
	
	// get list of all rule inputs for convenience
	$test_request = '';
	$test_server = '';
	foreach($settings['balance_rules'] as $i => $rule)
	{
		if($rule['condition'] == 'request')
			$test_request .= $rule['input'] . '=&';
		elseif($rule['condition'] == 'server')
			$test_server .= $rule['input'] . '=&';
	}
	// remove last ampersand
	$test_request = substr($test_request, 0, -1);
	$test_server = substr($test_server, 0, -1);
	
	$options['test'] = array(
		'name' => 'Test Rules',
		'status' => '',
		'description' => array(
			'list' => array(
				'Use this form to test redirection.',
				'Enter the request and server variables needed to test the rules.',
				'The default input values are inserted for you.'
			),
		),
		'type' => 'set',
		'options' => array(
			'test_rules[module]' => array(
				'type' => 'select',
				'options' => $modules,
				'value' => 'encode',
				'name' => 'Module',
			),
			'test_rules[request]' => array(
				'type' => 'text',
				'value' => $test_request,
				'name' => 'Request Variables',
			),
			'test_rules[server]' => array(
				'type' => 'text',
				'value' => $test_server,
				'name' => 'Server Variables',
			),
			'test_rules[test]' => array(
				'type' => 'submit',
				'value' => 'Test Rules',
			),
		),
	);
	
	return array('balancer' => array(
		'name' => 'Load Balancing Options',
		'type' => 'fieldset',
		'options' => $options
	));
}


