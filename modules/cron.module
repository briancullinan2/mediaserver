<?php


function menu_cron()
{
	return array(
		'cron' => array(
			'callback' => 'output_cron',
		)
	);
}

function setup_cron()
{
	$GLOBALS['cron_running'] = false;
}

/**
 * Implementation of status
 * @ingroup status
 */
function status_cron()
{
	$status = array();

	if(dependency('database'))
	{
		$status['cron'] = array(
			'name' => lang('Cron', 'cron status title'),
			'status' => '',
			'description' => array(
				'list' => array(
					lang('Cron updating functionality is available.', 'cron status description'),
				),
			),
			'value' => array(
				'text' => array(
					'Cron updating available',
				),
			),
		);
	}
	else
	{
		$status['users'] = array(
			'name' => lang('Cron', 'users status title'),
			'status' => 'fail',
			'description' => array(
				'list' => array(
					lang('Cron cannot update the database because it is not configured.', 'cron status fail description'),
				),
			),
			'value' => array(
				'text' => array(
					'Cron cannot update',
				),
			),
		);
	}
	
	return $status;
}

/**
 * Implementation of configure
 * @ingroup configure
 */
function configure_cron($settings, $request)
{
	$settings['dir_seek_time'] = setting('dir_seek_time');
	$settings['file_seek_time'] = setting('file_seek_time');
	$settings['cleanup_buffer_time'] = setting('cleanup_buffer_time');
	$settings['cleanup_threashold'] = setting('cleanup_threashold');
	
	$options = array();
	
	$options['cron'] = array(
		'name' => 'Running the Cron',
		'status' => '',
		'description' => array(
			'list' => array(
				'In order for the cron script to run, it must be installed in the OS to run periodically throughout the day.',
			),
		),
		'value' => array(
			'On Unix and Linux:',
			array(
				'code' => '&nbsp;&nbsp;&nbsp;&nbsp;0 * * * * /usr/bin/php /&lt;site path&gt;/modules/cron.php &gt;/dev/null 2&gt;&amp;1<br />
				&nbsp;&nbsp;&nbsp;&nbsp;30 * * * * /usr/bin/php /&lt;site path&gt;/modules/cron.php &gt;/dev/null 2&gt;&amp;1<br />',
			),
			'On Windows:',
			'Run this command from the command line to install the cron script as a task:',
		),
	);
	
	// dir seek time
	$options['setting_dir_seek_time'] = array(
		'name' => 'Directory Seek Time',
		'status' => '',
		'description' => array(
			'list' => array(
				'This script allows you to specify an amount of time to spend on searching directories.  This is so the script only runs for a few minutes every hour or every half hour.',
				'The directory seek time is the amount of time the script will spend searching directories for changed files.',
			),
		),
		'type' => 'time',
		'value' => $settings['dir_seek_time'],
	);
	
	// file seek time
	$options['setting_file_seek_time'] = array(
		'name' => 'File Seek Time',
		'status' => '',
		'description' => array(
			'list' => array(
				'The file seek time is the amount of time the script will spend reading file information and putting it in to the database.',
			),
		),
		'type' => 'time',
		'value' => $settings['dir_seek_time'],
	);
	
	$options['setting_cleanup_buffer_time'] = array(
		'name' => 'Clean-Up Buffer Time',
		'status' => '',
		'description' => array(
			'list' => array(
				'The clean up buffer time is used to add an extra amount of run time for database cleanup, such as removing non-existent files or duplicate files.',
			),
		),
		'type' => 'time',
		'value' => $settings['cleanup_buffer_time'],
	);
	
	$options['setting_cleanup_threashold'] = array(
		'name' => 'Clean-Up Threashold',
		'status' => '',
		'description' => array(
			'list' => array(
				'How many time should the script script run before cleaning up.',
				'Sometimes cleanups can be time consuming, if the accuracy of what is on the filesystem is not a concern, this value should be high.',
			),
		),
		'type' => 'text',
		'value' => $settings['cleanup_threashold'],
	);
	
	return array('cron' => array(
		'name' => 'Cron',
		'type' => 'fieldset',
		'options' => $options
	));
}

/**
 * Implementation of dependency
 * Check the late date the cron ran and show status if it is too long ago
 * @ingroup dependency
 */
function dependency_cron_last_run()
{
	return true; // TODO: more here
}

function dependency_dir_to_scan()
{
	return count(setting('watches')) > 0;
}

/**
 * Implementation of setting
 * @ingroup setting
 * @return 60 by default, accepts a number over zero or numeric [value] * numeric [multiplier]
 */
function setting_dir_seek_time($settings)
{
	if(isset($settings['dir_seek_time']['value']) && isset($settings['dir_seek_time']['multiplier']) && 
		is_numeric($settings['dir_seek_time']['value']) && is_numeric($settings['dir_seek_time']['multiplier'])
	)
		$settings['dir_seek_time'] = $settings['dir_seek_time']['value'] * $settings['dir_seek_time']['multiplier'];
	
	if(isset($settings['dir_seek_time']) && is_numeric($settings['dir_seek_time']) && $settings['dir_seek_time'] > 0)
		return $settings['dir_seek_time'];
	else
		return 60;
}

/**
 * Implementation of setting
 * @ingroup setting
 * @return 60 by default
 */
function setting_file_seek_time($settings)
{
	if(isset($settings['file_seek_time']['value']) && isset($settings['file_seek_time']['multiplier']) && 
		is_numeric($settings['file_seek_time']['value']) && is_numeric($settings['file_seek_time']['multiplier'])
	)
		$settings['file_seek_time'] = $settings['file_seek_time']['value'] * $settings['file_seek_time']['multiplier'];
	
	if(isset($settings['file_seek_time']) && is_numeric($settings['file_seek_time']) && $settings['file_seek_time'] > 0)
		return $settings['file_seek_time'];
	else
		return 60;
}

/**
 * Implementation of setting
 * @ingroup setting
 * @return 45 by default
 */
function setting_cleanup_buffer_time($settings)
{
	if(isset($settings['cleanup_buffer_time']['value']) && isset($settings['cleanup_buffer_time']['multiplier']) && 
		is_numeric($settings['cleanup_buffer_time']['value']) && is_numeric($settings['cleanup_buffer_time']['multiplier'])
	)
		$settings['cleanup_buffer_time'] = $settings['cleanup_buffer_time']['value'] * $settings['cleanup_buffer_time']['multiplier'];
	
	if(isset($settings['cleanup_buffer_time']) && is_numeric($settings['cleanup_buffer_time']) && $settings['cleanup_buffer_time'] > 0)
		return $settings['cleanup_buffer_time'];
	else
		return 45;
}

/**
 * Implementation of setting
 * @ingroup setting
 * @return 5 by default
 */
function setting_cleanup_threashold($settings)
{
	if(isset($settings['cleanup_threashold']) && is_numeric($settings['cleanup_threashold']))
		return $settings['cleanup_threashold'];
	else
		return 5;
}

function setting_cron_running()
{
	if(isset($GLOBALS['cron_running']) && $GLOBALS['cron_running'])
		return true;
	else
		return false;
}

/**
 * Implementation of validate
 * @ingroup validate
 * @return NULL by default, valid input is the index of the watched directory to scan
 */
function validate_scan_entry($request)
{
	if(isset($request['scan_entry']) && is_numeric($request['scan_entry']) && $request['scan_entry'] > 0 && $request['scan_entry'] < count($GLOBALS['watched']))
		return $request['scan_entry'];
	elseif(isset($request['scan_dir']))
	{
		foreach($GLOBALS['watched'] as $i => $watch)
		{
			if(substr($request['scan_dir'], 0, strlen($watch['Filepath'])) == $watch['Filepath'])
				return $i;
		}
	}
}

/**
 * Imeplementation of validate
 * @ingroup validate
 * @return NULL by default, valid input is the full watched path of the directory to scan
 */
function validate_scan_dir($request)
{
	$request['scan_entry'] = validate($request, 'scan_entry');
	
	if(isset($request['scan_dir']))
	{
		if(is_watched($request['scan_dir']) && 
			(
			 	!isset($request['scan_entry']) ||
				substr($request['scan_dir'], 0, strlen($GLOBALS['watched'][$request['scan_entry']]['Filepath'])) == $GLOBALS['watched'][$request['scan_entry']]['Filepath']
			)
		)
			return $request['scan_dir'];
		else
			unset($request['scan_dir']);
	}
	
	if(!isset($request['scan_dir']))
		return isset($request['scan_entry'])?$GLOBALS['watched'][$request['scan_entry']]['Filepath']: $GLOBALS['watched'][0]['Filepath'];
}

/**
 * Implementation of validate
 * @ingroup validate
 * @return false by default, true to ingore the lock on the log file and scan anyways
 */
function validate_ignore_lock($request)
{
	if(!isset($request['ignore_lock']))
		return false;
	else
		return $request['ignore_lock'] == true;
}

/**
 * Implementation of validate
 * @ingroup validate
 * @return setting(cleanup_threashold) by default, any number between zero and setting(cleanup_threashold) is valid, this will be incremented and saved in the state
 */
function validate_clean_count($request)
{
	if(isset($request['clean_count']) && is_numeric($request['clean_count']) && $request['clean_count'] > 0 && $request['clean_count'] < setting('cleanup_threashold'))
		return $request['clean_count'];
	else
		return setting('cleanup_threashold');
}

/**
 * Implementation of validate
 * @ingroup validate
 * @return false by default, when set to true the file scanning will be skipped, only the directory scanning will be done
 */
function validate_scan_skip($request)
{
	if(!isset($request['scan_skip']))
		return false;
	else
		return $request['scan_skip'] == true;
}


/**
 * @defgroup handle Handle File Functions
 * Functions that read file information and store in the database
 * @param file the file to add to the database
 * @param force force checking if the file is in the database and add it
 * @return The ID for the file added to the database, or false if nothing was done or it isn't handled
 * @{
 */
 
function cron_add_all($file)
{
	// first add id
	$fileid = add($file, 'ids');
	
	$ids = array();
	foreach(get_handlers(false) as $module => $config)
	{
		$fileinfo = add($file, $module);
		if($fileinfo !== false)
			$ids[$module . '_id'] = $fileinfo['id'];
	}
	
	// update ids
	db_query('UPDATE ids ' . sql_update($ids) . ' WHERE id=' . $fileid['id'], array_values($ids));

}

function output_cron($request)
{
	global $log_fp;
	
	$GLOBALS['cron_running'] = true;
	
	header('Content-type: text/html; charset=UTF-8');
	
	// close the session so the site can be used while cron is manually started
	session_write_close();
	
	//------------- DON'T CHANGE THIS - USE /include/settings.php TO MODIFY THESE VALUES ---------//
	// add 30 seconds becase the cleanup shouldn't take any longer then that
	set_time_limit(setting('dir_seek_time') + setting('file_seek_time') + setting('cleanup_buffer_time'));
	
	// ignore user abort because the script will handle it
	ignore_user_abort(1);
	
	// set up a special error handler
	$log_fp = fopen(setting('tmp_dir') . 'mediaserver.log', 'wb');
	
	// get the starting path for directory scanning
	$files = db_assoc('SELECT * FROM watched WHERE LEFT(Filepath, 1) = "^"');
	if(isset($request['scan_dir']))
		$filepath = $request['scan_dir'];
	elseif(isset($request['scan_entry']))
		$filepath = setting('watched_' . $request['scan_entry']);
	// get saved directory starting point from database
	else
	{
		if(count($files) == 0)
			$filepath = setting('watched_0');
		else
			$filepath = substr($files[0]['Filepath'], 1);
	}
	
	// start timer
	$GLOBALS['tm_start'] = array_sum(explode(' ', microtime()));
	
	while(true)
	{
		$current_dir = scan_watched($filepath);

		// continue on to next watched directory
		if($current_dir === true)
		{
			$index = get_watched_index($filepath) + 1;
			if($index > count(setting('watches')))
				$index = 0;
			$filepath = substr(setting('watched_' . $index), 1);
		}
		// save directory left off at
		else
		{
			if(count($files) == 0)
				$id = db_insert('INSERT INTO watched (Filepath) VALUES (?)', array('^' . $current_dir));
			else
				$result = db_query('UPDATE watched SET Filepath=? WHERE LEFT(Filepath, 1) = "^"', array('^' . $current_dir));
			
			// exit while because we ran out of time
			break;
		}
	}
		
	// reset timer for file seeking
	$GLOBALS['tm_start'] = array_sum(explode(' ', microtime()));

	// scan changed directories
	while(true)
	{
		// check if execution time is too long
		$secs_total = array_sum(explode(' ', microtime())) - $GLOBALS['tm_start'];
		
		if( $secs_total > setting('file_seek_time') )
		{
			// return the path to be saved in the state
			break;
		}
		
		// get file out of watched
		$files = db_assoc('SELECT id,Filepath FROM watched LIMIT 1');
		
		// stop if no more files in watched database
		if(count($files) == 0)
			break;
		
		// remove from watched list
		$result = db_query('DELETE FROM watched WHERE id=?', array($files[0]['id']));
		
		// update files
		scan_watched_files($files[0]['Filepath'], 'cron_add_all');
	}
	
	// cleanup
	fclose($log_fp);


	$GLOBALS['cron_running'] = false;

}

function cron_error_callback($error)
{
	if(substr($error->message, 0, 9) == 'DATABASE:')
		return;
	// do not print notes
	print $error->message . "<br />\n";
	flush();
}

if(php_sapi_name() == 'cli' && basename($_SERVER['SCRIPT_FILENAME']) == 'cron.module')
{
	$_REQUEST['path_info'] = 'cron';
	include_once dirname(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'index.php';
}